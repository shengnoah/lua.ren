<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">LUA教程</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://0.0.0.0:8081/feed.xml" />
<link rel="alternate" type="text/html" href="http://0.0.0.0:8081" />
<updated>2020-12-04T13:41:25+08:00</updated>
<id>http://0.0.0.0:8081/</id>
<author>
  <name>糖果</name>
  <uri>http://0.0.0.0:8081/</uri>
  <email>49263457@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-994_Lua%E4%B8%AD.%E5%92%8C-%E8%8A%B1%E7%94%9F%E8%82%89%E6%B3%A5/" />
  <id>http://0.0.0.0:8081/2016-01-01-994_Lua中.和: · 花生肉泥</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;在lua开发中我们经常会混淆这两者之间的区别，下面通过一个示例来解释：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class = {}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;Class.&lt;span class=&quot;built_in&quot;&gt;__index&lt;/span&gt; = Class&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; cls = {}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;setmetatable&lt;/span&gt;(cls, Class)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    cls.x = x&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    cls.y = y&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cls&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Class:test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- function Class.test(self)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(self.x,self.y)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;object = Class.new(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;object:test()&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;object.test(object)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;可以看到： &lt;/p&gt;
&lt;p&gt;1、 定义的时候： Class:test()与 Class.test(self)是等价的 ，点号(.)要达到冒号(:)的效果要加一个self参数到第一个参数； &lt;/p&gt;
&lt;p&gt;2、 调用的时候： object:test() 与object.test(object)等价 ，点号(.)要添加对象自身到第一个参数。&lt;/p&gt;
&lt;p&gt;总结：可以把点号(.)作为静态方法来看待，冒号(:)作为成员方法来看待。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-994_Lua%E4%B8%AD.%E5%92%8C-%E8%8A%B1%E7%94%9F%E8%82%89%E6%B3%A5/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-987_Video-Description-A-Survey-of-Methods,-Datasets-a/" />
  <id>http://0.0.0.0:8081/2016-01-01-987_Video Description: A Survey of Methods, Datasets a</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;视频描述仍然处于起步阶段的原因&quot;&gt;&lt;a href=&quot;#视频描述仍然处于起步阶段的原因&quot; class=&quot;headerlink&quot; title=&quot;视频描述仍然处于起步阶段的原因&quot;&gt;&lt;/a&gt;视频描述仍然处于起步阶段的原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对视频描述模型的分析是困难的，很难去判别是visual feature 亦或是 language model 哪个做的贡献大&lt;/li&gt;
&lt;li&gt;当前的数据集，既没有包含足够的视觉多样性，也没有复杂的语言结构&lt;/li&gt;
&lt;li&gt;当前的凭据指标并不能非常正确的去评估生成的句子与人类生成的句子之间的一致程度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-difficulty-of-video-caption&quot;&gt;&lt;a href=&quot;#the-difficulty-of-video-caption&quot; class=&quot;headerlink&quot; title=&quot;the difficulty of video caption&quot;&gt;&lt;/a&gt;the difficulty of video caption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并不是在video中的所有object 都是与description相关的，可能其只是背景中的一个元素。    &lt;/li&gt;
&lt;li&gt;此外，还需要objects的运动信息，以及 事件，动作，对象之间的因果关系。   &lt;/li&gt;
&lt;li&gt;视频中的action可能有不同的长度，不同的action之间，可能有重叠。    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sequence-Learning-based-Video-Captioning-Methods&quot;&gt;&lt;a href=&quot;#Sequence-Learning-based-Video-Captioning-Methods&quot; class=&quot;headerlink&quot; title=&quot;Sequence Learning based Video Captioning Methods&quot;&gt;&lt;/a&gt;Sequence Learning based Video Captioning Methods&lt;/h3&gt;
&lt;h4 id=&quot;CNN-RNN-based&quot;&gt;&lt;a href=&quot;#CNN-RNN-based&quot; class=&quot;headerlink&quot; title=&quot;CNN-RNN-based&quot;&gt;&lt;/a&gt;CNN-RNN-based&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一个 end-to-end：&lt;/p&gt;
&lt;p&gt;S. Venugopalan, H. Xu, J. Donahue, M. Rohrbach, R. Mooney, and K. Saenko. 2014. Translating videos to natural language using deep recurrent neural networks. arXiv preprint arXiv:1412.4729, (2014).    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea016090c918345.png&quot; alt=&quot;图片1.png&quot; title=&quot;图片1.png&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S2VT （变长输入，变长输出）&lt;/p&gt;
&lt;p&gt;I. Sutskever, O. Vinyals, and Q. V. Le. 2014. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems. 3104-3112.    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea01536b3144846.png&quot; alt=&quot;图片2.png&quot; title=&quot;图片2.png&quot; /&gt;   
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TA ( 加入C3D[1] )&lt;/p&gt;
&lt;p&gt;L. Yao, A. Torabi, K. Cho, N. Ballas, C. Pal, H. Larochelle, and A.Courville. 2015. Describing videos by exploiting temporal structure. In IEEE ICCV    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea016a248c95582.png&quot; alt=&quot;图片3.png&quot; title=&quot;图片3.png&quot; /&gt;  
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LSTM-E （making a common visual-semantic-embedding ）&lt;/p&gt;
&lt;p&gt;Y. Pan, T. Mei, T. Yao, H. Li, and Y. Rui. 2016. Jointly modeling embedding and translation to bridge video and language. In IEEE CVPR. &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea421aaf9013065.png&quot; alt=&quot;图片4.png&quot; title=&quot;图片4.png&quot; /&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GRU-EVE  ( short fourier transform)&lt;/p&gt;
&lt;p&gt;N. Aafaq, N. Akhtar, W. Liu, S. Z. Gilani and A. Mian. 2019. Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning. In IEEE CVPR.    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea0163113561600.png&quot; alt=&quot;搜狗截图20190729152752.png&quot; title=&quot;搜狗截图20190729152752.png&quot; /&gt;   
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;h-RNN&lt;br /&gt;H. Yu, J. Wang, Z. Huang, Y. Yang, and W. Xu. 2016. Video paragraph captioning using hierarchical recurrent neural networks. In IEEE CVPR.&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea63af2e0354548.png&quot; alt=&quot;图片5.png&quot; title=&quot;图片5.png&quot; /&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;RL-based&quot;&gt;&lt;a href=&quot;#RL-based&quot; class=&quot;headerlink&quot; title=&quot;RL-based&quot;&gt;&lt;/a&gt;RL-based&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Z. Ren, X. Wang, N. Zhang, X. Lv, and L. Li. 2017. Deep reinforcement learning-based image captioning with embedding reward. arXiv preprint arXiv:1704.03899, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Y. Chen, S. Wang, W. Zhang, and Q. Huang. 2018.  ==Less Is More: Picking Informative Frames for Video Captioning.==  arXiv preprint arXiv:1803.01457, (2018).&lt;/p&gt;
&lt;p&gt;提出了一个基于强化学习的方法，来选择 key informative frames 来表达一个 complete video ，希望这样的操作可以忽略掉噪声和不必要的计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;L. Li and B. Gong. 2018. End-to-End Video Captioning with Multitask Reinforcement Learning. arXiv preprint arXiv:1803.07950,&lt;br /&gt;(2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R. Pasunuru and M. Bansal. 2017. Reinforced video captioning with entailment rewards. arXiv preprint arXiv:1708.02300, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S. Phan, G. E. Henter, Y. Miyao, and S. Satoh. 2017. Consensusbased Sequence Training for Video Captioning. arXiv preprint arXiv:1712.09532, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;X. Wang, W. Chen, J. Wu, Y. Wang, and W. Y. Wang. 2017.  ==Video Captioning via Hierarchical Reinforcement Learning.==  arXiv preprint arXiv:1711.11135, (2017).&lt;/p&gt;
&lt;p&gt;在 decoder阶段，使用 深度强化学习，这个方法证明可以捕捉到视频内容中的细节，并生成细粒度的description，但是！这个方法相对于当前的baseline 没有多大的提高。（我自己还需要再看看， 使用DRL的motivation）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Evaluation-Metrics&quot;&gt;&lt;a href=&quot;#Evaluation-Metrics&quot; class=&quot;headerlink&quot; title=&quot;Evaluation Metrics&quot;&gt;&lt;/a&gt;Evaluation Metrics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/joshuaxx316/article/details/58696552&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BLEU、ROUGE、METEOR  来源于 机器翻译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CIDEr、SPICE 来源于图像描述   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BLEU&quot;&gt;&lt;a href=&quot;#BLEU&quot; class=&quot;headerlink&quot; title=&quot;BLEU&quot;&gt;&lt;/a&gt;BLEU&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/allocator/article/details/79657792&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BLEU参考链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;==BLEU实质是对两个句子的共现词频率计算==，但计算过程中使用好些技巧，追求计算的数值可以衡量这两句话的一致程度。 &lt;/li&gt;
&lt;li&gt;BLEU容易陷入常用词和短译句的陷阱中，而给出较高的评分值。本文主要是对解决BLEU的这两个弊端的优化方法介绍。&lt;/li&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;　不考虑语言表达（语法）上的准确性； &lt;/li&gt;
&lt;li&gt;　 测评精度会受常用词的干扰； &lt;/li&gt;
&lt;li&gt;　 短译句的测评精度有时会较高； &lt;/li&gt;
&lt;li&gt;　没有考虑同义词或相似表达的情况，可能会导致合理翻译被否定；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;ROUGE&quot;&gt;&lt;a href=&quot;#ROUGE&quot; class=&quot;headerlink&quot; title=&quot;ROUGE&quot;&gt;&lt;/a&gt;ROUGE&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ed71f2086769963.png&quot; alt=&quot;20170228224903951.png&quot; title=&quot;20170228224903951.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;METEOR&quot;&gt;&lt;a href=&quot;#METEOR&quot; class=&quot;headerlink&quot; title=&quot;METEOR&quot;&gt;&lt;/a&gt;METEOR&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edcce1761442736.png&quot; alt=&quot;20170228225011405.png&quot; title=&quot;20170228225011405.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;CIDEr&quot;&gt;&lt;a href=&quot;#CIDEr&quot; class=&quot;headerlink&quot; title=&quot;CIDEr&quot;&gt;&lt;/a&gt;CIDEr&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edcce646d089162.png&quot; alt=&quot;20170228225056046.png&quot; title=&quot;20170228225056046.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;SPICE&quot;&gt;&lt;a href=&quot;#SPICE&quot; class=&quot;headerlink&quot; title=&quot;SPICE&quot;&gt;&lt;/a&gt;SPICE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于 gt 和 pred 的场景图解析，来对预测结果进行评价，&lt;/li&gt;
&lt;li&gt;不被广泛使用的原因是，当前sentence scene graph 的能力还比较若，很容易解析错误(eg:dog swimming through river”, the failure case could be the word “swimming” being parsed as “object” and the word “dog” parsed as “attribute” )&lt;/li&gt;
&lt;li&gt;对句子解析错误了，那么给出的评价指标也不会很好！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edd503479c20027.png&quot; alt=&quot;搜狗截图20190729194921.png&quot; title=&quot;搜狗截图20190729194921.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;当前的瓶颈：&quot;&gt;&lt;a href=&quot;#当前的瓶颈：&quot; class=&quot;headerlink&quot; title=&quot;当前的瓶颈：&quot;&gt;&lt;/a&gt;当前的瓶颈：&lt;/h3&gt;
&lt;h4 id=&quot;缺乏有效的评价指标&quot;&gt;&lt;a href=&quot;#缺乏有效的评价指标&quot; class=&quot;headerlink&quot; title=&quot;缺乏有效的评价指标&quot;&gt;&lt;/a&gt;缺乏有效的评价指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们的调查显示，阻碍这一研究进展的一个主要瓶颈是缺乏有效和有目的设计的视频描述评价指标。目前，无论是从机器翻译还是从图像字幕中，都采用了现有的度量标准，无法衡量机器生成的视频字幕的质量及其与人类判断的一致性。改进这些指标的一种方法是增加引用语句的数量。我们认为，从数据本身学习的目的构建的度量标准是推进视频描述研究的关键。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;王鑫也曾说：human evaluation在video captioning任务中是有必要的       &lt;/p&gt;
&lt;h4 id=&quot;视觉特征部分的瓶颈&quot;&gt;&lt;a href=&quot;#视觉特征部分的瓶颈&quot; class=&quot;headerlink&quot; title=&quot;视觉特征部分的瓶颈&quot;&gt;&lt;/a&gt;视觉特征部分的瓶颈&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在一个video中，可能出现多个activity，但是caption model只能检测出部分几个，导致性能下降。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能这个video中 action 的持续时间较长，但是，当前的video representation方法只能捕捉时域较短的运动信息（eg:C3D），因此不能很好地提取视频特征。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大多数特征提取器只适用于静态或平稳变化的图像，因此难以处理突然的场景变化。目前的方法通过表示整体视频或帧来简化视觉编码部分。可能需要进一步探索注意力模型，以关注视频中具有重要意义的空间和时间部分。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前的encoder 与 decoder 部分，并 ==不是端到端的==，需要先提取 video representation再进行decoder，这样分布进行，而不是端到端的训练是不好的！    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;captioning-model-的可解释性不足&quot;&gt;&lt;a href=&quot;#captioning-model-的可解释性不足&quot; class=&quot;headerlink&quot; title=&quot;captioning model 的可解释性不足&quot;&gt;&lt;/a&gt;captioning model 的可解释性不足&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;举个例子：当我们从包含“白色消防栓”的帧中看到视频描述模型生成的标题“红色消防栓”时，很难确定颜色特征是视觉特征提取器编码错误还是由于使用的语言模型bias( 由于有过多的训练数据是“红色消防栓)。&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ee4996cf7480633.png&quot; alt=&quot;搜狗截图20190729202028.png&quot; title=&quot;搜狗截图20190729202028.png&quot; /&gt;



&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[1] D. Tran, L. D. Bourdev, R. Fergus, L. Torresani, and M. Paluri. 2014. C3D: Generic Features for Video Analysis. CoRR abs/1412.0767, (2014). &lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-987_Video-Description-A-Survey-of-Methods,-Datasets-a/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-902_VA_2-A-Visual-Analytics-Approach-for-_Evaluating/" />
  <id>http://0.0.0.0:8081/2016-01-01-902_VA_2: A Visual Analytics Approach for _Evaluating </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;论文：VA^2: A Visual Analytics Approach for // Evaluating Visual Analytics Applications&lt;/p&gt;
&lt;p&gt;作者：Tanja Blascheck, Markus John, Kuno Kurzhals, Steffen Koch, Thomas Ertl&lt;/p&gt;
&lt;p&gt;发表会议：VAST 2015&lt;br /&gt;本文提出一个用于展示和分析“用户如何使用可视化分析系统”的高度交互可视化的环境，途径是分析用户在可视分析过程中产生的 thinking aloud, interaction, and eye movement 数据。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cad.zju.edu.cn/home/vagblog/wp-content/uploads/2015/12/VA1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;http://www.cad.zju.edu.cn/home/vagblog/wp-content/uploads/2015/12/VA1.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;评估可视分析的技术在探索用户如何理解一个新方法的过程中起着相当重要的作用，目前有一些评估可视分析的技术，但却很少有人做一个并列的综合分析评估程序。本文采取了综合的可视分析技术，对不同的数据类别进行分析，以评估可视化和可视化系统。&lt;/p&gt;
&lt;p&gt;评估可视化系统主要收集三种数据：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Interaction Logs&lt;br /&gt;用户在哪些地方进行交互，文章根据参考文献中对 Interaction logs 分成了十一类&lt;/li&gt;
&lt;li&gt;Thinking aloud protocols&lt;br /&gt;一般用户在获得信息时会有所表现&lt;/li&gt;
&lt;li&gt;Eye tracking&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到哪些内容是用户所聚焦的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cad.zju.edu.cn/home/vagblog/wp-content/uploads/2015/12/VA2.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;http://www.cad.zju.edu.cn/home/vagblog/wp-content/uploads/2015/12/VA2.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文章通过对 thinking aloud, interaction, and eye movement 数据的处理来同步展示用户的思维过程，有助于分析师分析 patterns.&lt;/p&gt;
&lt;p&gt;用户分析：&lt;br /&gt;最终用户认为该方法的优点在于编码是颜色和形状减少视觉的混乱，且分析师不必需要太多的专业知识就可以上手。但用户也认为有一些缺点，比如说：interaction logs 在编码时十一种颜色很难记住，自言自语的数据不能被隐藏，分析师在分析的时候需要大量的滚动操作等等。&lt;br /&gt;本文的最大贡献就是评估 VA 系统时分析了 Eye tracking、Thinking aloud、Interaction logs 三种数据。且有很强的普适性，除了 VarifocalReader 文章还讨论了 Word Cloud Explorer 的使用情况。&lt;/p&gt;
&lt;p&gt;总结文章的优点有如下：&lt;br /&gt;框架明了，介绍清晰，想法新颖，编码科学。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-902_VA_2-A-Visual-Analytics-Approach-for-_Evaluating/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-899_BLEU-a-Method-for-Automatic-Evaluation-of-Machine/" />
  <id>http://0.0.0.0:8081/2016-01-01-899_BLEU: a Method for Automatic Evaluation of Machine</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;翻译有三要素：恰当性，准确性，流畅性。本文提出了自动化评估翻译效果的方法。&lt;/p&gt;
&lt;h1 id=&quot;方法&quot;&gt;方法&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;人工给出若干个参考翻译，计算候选翻译的每个n-gram在参考翻译出现过的次数，除以总n-gram数&lt;/li&gt;
  &lt;li&gt;对于相同的n-gram，有效次数不超过参考翻译中出现的最大次数&lt;/li&gt;
  &lt;li&gt;惩罚短句，其中c为候选翻译长度，r为有效参考翻译长度（可选最短的那种）：
 &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
BP=left{
     begin{array}{rcl}
     1 &amp; if &amp;c&gt;r\
     e^{(1-r/c)} &amp; if &amp; c leq r
     end{array}
     right. %]]&gt;&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;计算$BLEU=BPcdot exp{left(sum^N_{n=1}w_nlog{p_n}right)}$或$log{BLEU}=min(1-r/c,0)+sum^N_{n=1}w_nlog{p_n}$
    &lt;h1 id=&quot;结论&quot;&gt;结论&lt;/h1&gt;
    &lt;p&gt;BLEU和人类判断成强正相关。&lt;/p&gt;
    &lt;h1 id=&quot;其它要点&quot;&gt;其它要点&lt;/h1&gt;
    &lt;p&gt;1-gram能衡量翻译的恰当性；更长的n-gram能衡量流畅性。&lt;br /&gt;
仅有1句参考翻译的情况下，BLEU也能很好地反映翻译质量。因此可以增大数据集的体量，每个样本只需1个参考，但数据集内需要有不同的翻译风格。&lt;br /&gt;
翻译可看成是文本生成，故BLEU也许也能用于文本总结等NLG任务。&lt;/p&gt;
    &lt;h1 id=&quot;备注&quot;&gt;备注&lt;/h1&gt;
    &lt;p&gt;adequacy 恰当性；适当性
fidelity 准确性；忠实性
stem from 出于，基于
case folding 大小写转换&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-899_BLEU-a-Method-for-Automatic-Evaluation-of-Machine/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-884_-Lua-lua-%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0%E5%88%B0%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0/" />
  <id>http://0.0.0.0:8081/2016-01-01-884_[Lua] lua 从字符串获取指定第几位数到第几位数 </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;– 判断utf8字符byte长度&lt;br /&gt;
– 0xxxxxxx - 1 byte&lt;br /&gt;
– 110yxxxx - 192, 2 byte&lt;br /&gt;
– 1110yyyy - 225, 3 byte&lt;br /&gt;
– 11110zzz - 240, 4 byte&lt;br /&gt;
local function chsize(char)&lt;br /&gt;
		if not char then&lt;br /&gt;
		    print(“not char”)&lt;br /&gt;
		    return 0&lt;br /&gt;
		    elseif char &amp;gt; 240 then&lt;br /&gt;
		    return 4&lt;br /&gt;
		    elseif char &amp;gt; 225 then&lt;br /&gt;
		    return 3&lt;br /&gt;
		    elseif char &amp;gt; 192 then&lt;br /&gt;
		    return 2&lt;br /&gt;
		    else&lt;br /&gt;
		    return 1&lt;br /&gt;
	    end&lt;br /&gt;
end&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- 计算utf8字符串字符数, 各种字符都按一个字符计算
-- 例如utf8len(&amp;#34;1你好&amp;#34;) =&amp;gt; 3
function utf8len(str)
    local len = 0
    local currentIndex = 1
    while currentIndex &amp;lt;= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    len = len +1
    end
    return len
end

-- 截取utf8 字符串
-- str: 要截取的字符串
-- startChar:   开始字符下标,从1开始
-- numChars:要截取的字符长度
function utf8sub(str, startChar, numChars)
    local startIndex = 1
    while startChar &amp;gt; 1 do
	    local char = string.byte(str, startIndex)
	    startIndex = startIndex + chsize(char)
	    startChar = startChar - 1
    end

    local currentIndex = startIndex
    
    while numChars &amp;gt; 0 and currentIndex &amp;lt;= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    numChars = numChars -1
    end
    return str:sub(startIndex, currentIndex - 1)
end

-- 自测
function test()
    -- test utf8len
    assert(utf8len(&amp;#34;你好1世界哈哈&amp;#34;) == 7)
    assert(utf8len(&amp;#34;你好世界1哈哈 &amp;#34;) == 8)
    assert(utf8len(&amp;#34; 你好世 界1哈哈&amp;#34;) == 9)
    assert(utf8len(&amp;#34;12345678&amp;#34;) == 8)
    assert(utf8len(&amp;#34;øpø你好pix&amp;#34;) == 8)

    -- test utf8sub
    assert(utf8sub(&amp;#34;你好1世界哈哈&amp;#34;,2,5) == &amp;#34;好1世界哈&amp;#34;)
    assert(utf8sub(&amp;#34;1你好1世界哈哈&amp;#34;,2,5) == &amp;#34;你好1世界&amp;#34;)
    assert(utf8sub(&amp;#34; 你好1世界 哈哈&amp;#34;,2,6) == &amp;#34;你好1世界 &amp;#34;)
    assert(utf8sub(&amp;#34;你好世界1哈哈&amp;#34;,1,5) == &amp;#34;你好世界1&amp;#34;)
    assert(utf8sub(&amp;#34;12345678&amp;#34;,3,5) == &amp;#34;34567&amp;#34;)
    assert(utf8sub(&amp;#34;øpø你好pix&amp;#34;,2,5) == &amp;#34;pø你好p&amp;#34;)
    
    print(&amp;#34;all test succ&amp;#34;)
end

test()
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;script async=&quot;&quot; defer=&quot;&quot; src=&quot;https://buttons.github.io/buttons.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Please &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi/hexo-theme-tsangsi&quot; data-icon=&quot;octicon-star&quot; aria-label=&quot;Star tsangsi/hexo-theme-tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Star&lt;/a&gt; this Project if you like it! &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi&quot; aria-label=&quot;Follow @tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Follow&lt;/a&gt; would also be appreciated!&lt;br /&gt;
Peace!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &amp;lt;hr/&amp;gt;
            
            

            &amp;lt;br/&amp;gt;

            
            
            

            &amp;lt;br/&amp;gt;
            
            
                
                
                &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css&quot;/&amp;gt;
                &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
            
            
            &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-884_-Lua-lua-%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0%E5%88%B0%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-875_-Lua/" />
  <id>http://0.0.0.0:8081/2016-01-01-875_[Lua</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;官网地址：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lua.org/home.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.lua.org/home.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lua是脚本语言，可以自己运行，可以嵌入C语言运行，也可以把C语言嵌入Lua运行。&lt;/p&gt;

&lt;p&gt;Lua全部都是用C语言实现的，可以到官网去下载源码，自己编译，编译过程很简单，没什么错误。&lt;/p&gt;

&lt;p&gt;源码目录结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mdgsf.github.io/images/2017/07/25_01.png&quot; alt=&quot;25_01&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;编译源码&quot;&gt;编译源码&lt;/h2&gt;

&lt;p&gt;需要在VS中新建一个VC++解决方案，在该解决方案下建3个项目，分别是&lt;strong&gt;lua库项目&lt;/strong&gt;，&lt;strong&gt;lua编译器项目&lt;/strong&gt;，&lt;strong&gt;lua解释器项目&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mdgsf.github.io/images/2017/07/25_02.png&quot; alt=&quot;25_02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lua53 是库项目，生成Lua53.lib。&lt;/p&gt;

&lt;p&gt;Lua 是解释器项目，生成Lua.exe。&lt;/p&gt;

&lt;p&gt;Luac 是编译器项目，生成Luac.exe。&lt;/p&gt;

&lt;p&gt;最终要生成的文件如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mdgsf.github.io/images/2017/07/25_03.png&quot; alt=&quot;25_03&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;建立lua53项目&quot;&gt;建立Lua53项目&lt;/h3&gt;

&lt;p&gt;打开VS2013(其他版本亦可)，新建VisuallC++ -&amp;gt;win32控制台应用程序，修改项目名称为Lua53，然后再点击确定。&lt;/p&gt;

&lt;p&gt;点击下一步，选择静态库，空项目，点击完成。&lt;/p&gt;

&lt;p&gt;将src目录下除了lua.c和luac.c其他所有文件加入lua53工程下的源文件目录&lt;/p&gt;

&lt;h3 id=&quot;建立luac编译器项目&quot;&gt;建立Luac编译器项目&lt;/h3&gt;

&lt;p&gt;打开VS2013(其他版本亦可)，新建VisuallC++ -&amp;gt;win32控制台应用程序，修改项目名称为Luac，然后再点击确定。&lt;/p&gt;

&lt;p&gt;点击下一步，选择控制台应用程序，空项目，点击完成。&lt;/p&gt;

&lt;p&gt;将src目录下除了lua.c其他所有文件加入lua53工程下的源文件目录&lt;/p&gt;

&lt;h3 id=&quot;建立lua解释器项目&quot;&gt;建立Lua解释器项目&lt;/h3&gt;

&lt;p&gt;打开VS2013(其他版本亦可)，新建VisuallC++ -&amp;gt;win32控制台应用程序，修改项目名称为Lua，然后再点击确定。&lt;/p&gt;

&lt;p&gt;点击下一步，选择控制台应用程序，空项目，点击完成。&lt;/p&gt;

&lt;p&gt;将src目录下除了luac.c其他所有文件加入lua53工程下的源文件目录&lt;/p&gt;

&lt;h2 id=&quot;lua的使用&quot;&gt;Lua的使用&lt;/h2&gt;

&lt;p&gt;最终我们会得到Lua53.lib, Luac.exe, Lua.exe。那要怎么使用呢？&lt;/p&gt;

&lt;p&gt;Lua.exe 是一个交互式的命令行解释器，可以直接双击打开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mdgsf.github.io/images/2017/07/25_04.png&quot; alt=&quot;25_04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luac.exe 是编译器。&lt;/p&gt;

&lt;p&gt;新建一个Hello.lua，执行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mdgsf.github.io/images/2017/07/25_05.png&quot; alt=&quot;25_05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lua53.lib 是一个库文件，如果想要在C语言中嵌入Lua的话，就需要把这个文件加入到C语言的项目中。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/2f649d9aef6d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://www.jianshu.com/p/2f649d9aef6d&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-875_-Lua/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-858_-Lua-Coroutine%E5%8D%8F%E7%A8%8B/" />
  <id>http://0.0.0.0:8081/2016-01-01-858_[Lua] Coroutine协程</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;coroutine-manipulation&quot;&gt;Coroutine Manipulation&lt;/h2&gt;

&lt;h3 id=&quot;coroutinecreate-f&quot;&gt;coroutine.create (f)&lt;/h3&gt;

&lt;p&gt;Creates a new coroutine, with body f. f must be a function. Returns this new coroutine, an object with type “thread”.&lt;/p&gt;

&lt;p&gt;创建一个新的协程。f必须是一个函数。返回值是这个新的协程，返回值的类型是thread。&lt;/p&gt;

&lt;h3 id=&quot;coroutineisyieldable-&quot;&gt;coroutine.isyieldable ()&lt;/h3&gt;

&lt;p&gt;Returns true when the running coroutine can yield.&lt;/p&gt;

&lt;p&gt;A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.&lt;/p&gt;

&lt;p&gt;返回true当正在运行的协程可以被yield。&lt;/p&gt;

&lt;h3 id=&quot;coroutineresume-co--val1-&quot;&gt;coroutine.resume (co [, val1, ···])&lt;/h3&gt;

&lt;p&gt;Starts or continues the execution of coroutine co. The first time you resume a coroutine, it starts running its body. The values val1, … are passed as the arguments to the body function. If the coroutine has yielded, resume restarts it; the values val1, … are passed as the results from the yield.&lt;/p&gt;

&lt;p&gt;If the coroutine runs without any errors, resume returns true plus any values passed to yield (when the coroutine yields) or any values returned by the body function (when the coroutine terminates). If there is any error, resume returns false plus the error message.&lt;/p&gt;

&lt;h3 id=&quot;coroutinerunning-&quot;&gt;coroutine.running ()&lt;/h3&gt;

&lt;p&gt;Returns the running coroutine plus a boolean, true when the running coroutine is the main one.&lt;/p&gt;

&lt;p&gt;返回一个正在运行的协程和一个boolean值，这个协程是主线程的话boolean值为true。&lt;/p&gt;

&lt;h3 id=&quot;coroutinestatus-co&quot;&gt;coroutine.status (co)&lt;/h3&gt;

&lt;p&gt;Returns the status of coroutine co, as a string: “running”, if the coroutine is running (that is, it called status); “suspended”, if the coroutine is suspended in a call to yield, or if it has not started running yet; “normal” if the coroutine is active but not running (that is, it has resumed another coroutine); and “dead” if the coroutine has finished its body function, or if it has stopped with an error.&lt;/p&gt;

&lt;h3 id=&quot;coroutinewrap-f&quot;&gt;coroutine.wrap (f)&lt;/h3&gt;

&lt;p&gt;Creates a new coroutine, with body f. f must be a function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume, except the first boolean. In case of error, propagates the error.&lt;/p&gt;

&lt;h3 id=&quot;coroutineyield-&quot;&gt;coroutine.yield (···)&lt;/h3&gt;

&lt;p&gt;Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.&lt;/p&gt;

&lt;p&gt;挂起调用这个函数的协程。参数会传递给resume，作为resume的返回值。&lt;/p&gt;

&lt;h2 id=&quot;例子&quot;&gt;例子&lt;/h2&gt;

&lt;h3 id=&quot;例子1&quot;&gt;例子1&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;---------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;---------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;coroutine.running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;suspended
1
dead
---------------
2
---------------
1
2
3
running
thread: 0000000000459dd8        false
suspended
thread: 0000000000456638        true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;例子2&quot;&gt;例子2&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;foo a = &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;1==== &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;2==== &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;3==== &amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;end of coroutine.&amp;#34;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;--------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;--------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;yyy&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;--------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;yyy&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;--------------&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1====   1       10
foo a =         2
main    true    4
--------------
2====   abc
main    true    11      -9
--------------
3====   xxx     yyy
main    true    10      end of coroutine.
--------------
main    false   cannot resume dead coroutine
--------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;例子3生产者消费者&quot;&gt;例子3：生产者，消费者&lt;/h3&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newProductor&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;productor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newProductor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;coroutine.yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;newProductor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;coroutine.create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1
2
3
4
5
6
7
8
9
10
nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-858_-Lua-Coroutine%E5%8D%8F%E7%A8%8B/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-830_BugBench-Benchmarks-for-Evaluating-Bug-Detection/" />
  <id>http://0.0.0.0:8081/2016-01-01-830_BugBench: Benchmarks for Evaluating Bug Detection </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;本文介绍构建bug benchmark suite &lt;code&gt;BugBench&lt;/code&gt;的过程.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择有代表性bug benchmark的标准&lt;/li&gt;
&lt;li&gt;选择收集有bug的应用&lt;/li&gt;
&lt;li&gt;初步研究这些应用和bug的特征&lt;/li&gt;
&lt;li&gt;在benchmark上评价已有的bug检测工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1 介绍&quot;&gt;&lt;/a&gt;1 介绍&lt;/h1&gt;
&lt;h2 id=&quot;1-1-动机&quot;&gt;&lt;a href=&quot;#1-1-动机&quot; class=&quot;headerlink&quot; title=&quot;1.1 动机&quot;&gt;&lt;/a&gt;1.1 动机&lt;/h2&gt;
&lt;p&gt;研究者需要一个统一的研究方法展示检测工具的好坏.&lt;/p&gt;
&lt;p&gt;构建benchmark增强了社区内的合作, 帮助社区对于面临的问题形参共识.&lt;/p&gt;
&lt;h2 id=&quot;1-2-我们的工作&quot;&gt;&lt;a href=&quot;#1-2-我们的工作&quot; class=&quot;headerlink&quot; title=&quot;1.2 我们的工作&quot;&gt;&lt;/a&gt;1.2 我们的工作&lt;/h2&gt;
&lt;p&gt;开源本文收集的bug应用到研究者社区.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bug benchmark的挑选标准和评价指标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BugBench&lt;/code&gt;: c/c++ bug benchmark suit&lt;/li&gt;
&lt;li&gt;在benchmark和bug特征上进行初步研究&lt;/li&gt;
&lt;li&gt;初步评价已有工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-已有工作的经验&quot;&gt;&lt;a href=&quot;#2-已有工作的经验&quot; class=&quot;headerlink&quot; title=&quot;2 已有工作的经验&quot;&gt;&lt;/a&gt;2 已有工作的经验&lt;/h1&gt;
&lt;h2 id=&quot;2-1-其他领域的Benchmark&quot;&gt;&lt;a href=&quot;#2-1-其他领域的Benchmark&quot; class=&quot;headerlink&quot; title=&quot;2.1 其他领域的Benchmark&quot;&gt;&lt;/a&gt;2.1 其他领域的Benchmark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPEC&lt;/strong&gt;: Standard Performance Evaluation Cooperative. &lt;ol&gt;
&lt;li&gt;候选项目在各自的领域有广泛的使用&lt;/li&gt;
&lt;li&gt;候选项目在不同架构平台上测试可移植性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TPC&lt;/strong&gt;: Transaction Processing Council. 用于比较数据库管理系统. 与&lt;strong&gt;SPEC&lt;/strong&gt;类似, &lt;strong&gt;TPC&lt;/strong&gt;要求项目有代表性, 多样性和可移植性. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-2-软工和Bug检测领域的已有Benchmark&quot;&gt;&lt;a href=&quot;#2-2-软工和Bug检测领域的已有Benchmark&quot; class=&quot;headerlink&quot; title=&quot;2.2 软工和Bug检测领域的已有Benchmark&quot;&gt;&lt;/a&gt;2.2 软工和Bug检测领域的已有Benchmark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CppETS&lt;/strong&gt;: 用于逆向工程. 提供一系列cpp程序, 每个关联一个问题文件. 每个检测工具需要回答问题, 然后计算得分. 这个得分代表了检测工具的性能.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Siemens benchmark&lt;/strong&gt;: 用于bug检测.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PEST&lt;/strong&gt;: 用于软件测试.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;越好的测试工具能够检测更多的bug版本. 尽管这些benchmark suites提供了很大的bug池, 但是许多bugs只是语义相关的bugs. 与内存相关和多线程相关的bugs几乎不存在. 此外, 这些benchmark应用的项目非常小, 有些甚至少于100行代码.&lt;/p&gt;
&lt;p&gt;最近, IBM Haifa提出构建一个多线程程序的benchmark. 但是效果不好, 因为他们依赖于学生故意生成有bug的程序, 而不是使用真实的bug.&lt;/p&gt;
&lt;h1 id=&quot;3-Benchmark构建指南&quot;&gt;&lt;a href=&quot;#3-Benchmark构建指南&quot; class=&quot;headerlink&quot; title=&quot;3 Benchmark构建指南&quot;&gt;&lt;/a&gt;3 Benchmark构建指南&lt;/h1&gt;
&lt;h2 id=&quot;3-1-软件bug的分类&quot;&gt;&lt;a href=&quot;#3-1-软件bug的分类&quot; class=&quot;headerlink&quot; title=&quot;3.1 软件bug的分类&quot;&gt;&lt;/a&gt;3.1 软件bug的分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;内存相关bug&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;buffer overflow: 非法获取超过buffer范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stack smashing: 非法重写函数返回地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Memory leak: 动态分配的内存没有引用它的指针, 但是这块空间没有被释放&lt;/li&gt;
&lt;li&gt;uninitialized read: 在初始化之前读取内存数据&lt;/li&gt;
&lt;li&gt;double free: 一块内存释放了两次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并发bug&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data race bugs: 并发线程之间对于共享数据的冲突访问&lt;/li&gt;
&lt;li&gt;atomicity-related bugs: 一个线程上的一系列操作被另一个线程的冲突操作中断&lt;/li&gt;
&lt;li&gt;deadlock: 多个进程争夺多个资源&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语义bug&lt;/p&gt;
&lt;p&gt;检测这些信息往往需要语义信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-2-bug检测工具的分类&quot;&gt;&lt;a href=&quot;#3-2-bug检测工具的分类&quot; class=&quot;headerlink&quot; title=&quot;3.2 bug检测工具的分类&quot;&gt;&lt;/a&gt;3.2 bug检测工具的分类&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/13/5bc156ba1348d.png&quot; alt=&quot;QQ截图20181013102121.png&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Programming-rule based tools&lt;/strong&gt;: 使用编程时必须遵循的规则, 如: 数组指针不能越界&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statistic-rule based tools&lt;/strong&gt;: 从成功运行的程序中学习统计正确的规则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;annotation-based&lt;/strong&gt;: 使用annotations进行语法检查&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-3-Benchmark选择标准&quot;&gt;&lt;a href=&quot;#3-3-Benchmark选择标准&quot; class=&quot;headerlink&quot; title=&quot;3.3 Benchmark选择标准&quot;&gt;&lt;/a&gt;3.3 Benchmark选择标准&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;有代表性: 能够代表真实的bug应用. &lt;/li&gt;
&lt;li&gt;多样性: bug类型多, bug的复杂性, 动态运行特征&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;可获取性/可访问性&lt;/li&gt;
&lt;li&gt;公平: 不偏向于某个具体的检测工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-4-评价指标&quot;&gt;&lt;a href=&quot;#3-4-评价指标&quot; class=&quot;headerlink&quot; title=&quot;3.4 评价指标&quot;&gt;&lt;/a&gt;3.4 评价指标&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/13/5bc159c7afdc3.png&quot; alt=&quot;QQ截图20181013103436.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;大多数度量评价数量, 如&lt;code&gt;pinpoint root cause&lt;/code&gt;, 就是通过从bug root cause到检测到bug位置的距离来量化. &lt;/p&gt;
&lt;p&gt;不同类型的工具使用不同的指标. 如静态工具只考虑&lt;code&gt;static analysis time&lt;/code&gt;, 动态工具考虑&lt;code&gt;training overhead&lt;/code&gt;和&lt;code&gt;dynamic detection overhead&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;4-Benchmark&quot;&gt;&lt;a href=&quot;#4-Benchmark&quot; class=&quot;headerlink&quot; title=&quot;4 Benchmark&quot;&gt;&lt;/a&gt;4 Benchmark&lt;/h1&gt;
&lt;h2 id=&quot;4-1-Benchmark-Suite&quot;&gt;&lt;a href=&quot;#4-1-Benchmark-Suite&quot; class=&quot;headerlink&quot; title=&quot;4.1 Benchmark Suite&quot;&gt;&lt;/a&gt;4.1 Benchmark Suite&lt;/h2&gt;
&lt;p&gt;收集17个存在bug的项目, 13个包含内存相关bug, 4个包含并发bug, 2个包含语义bug.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/13/5bc15c45a6236.png&quot; alt=&quot;QQ截图20181013104518.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-2-初步特征分析&quot;&gt;&lt;a href=&quot;#4-2-初步特征分析&quot; class=&quot;headerlink&quot; title=&quot;4.2 初步特征分析&quot;&gt;&lt;/a&gt;4.2 初步特征分析&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/13/5bc15cd5d20e3.png&quot; alt=&quot;QQ截图20181013104736.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;每百万个插桩, 内存分配的频率为[0 ,769], 分配大小从[0, 6.0M]. 一般来说内存分配次数越多, 工具承受的负载越大. 每个插桩的内存访问数为[0.479, 0.848], 堆使用率0%~99%.&lt;/p&gt;
&lt;p&gt;为了评价bug复杂度, 这里使用临床症状和crash latency评价. &lt;code&gt;Crash latency&lt;/code&gt;是指造成bug的根本原因到应用由于bug传播最终crash的位置的距离. 如果&lt;code&gt;Crash latency&lt;/code&gt;很短, bug就很好找到; 但是如果bug在一长串的error传播之后才报出, 检测bug的根本原因就变得困难.&lt;/p&gt;
&lt;h1 id=&quot;5-初步评价&quot;&gt;&lt;a href=&quot;#5-初步评价&quot; class=&quot;headerlink&quot; title=&quot;5 初步评价&quot;&gt;&lt;/a&gt;5 初步评价&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/13/5bc1606bb69fa.png&quot; alt=&quot;QQ截图20181013110300.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Benchmark&lt;/code&gt;评价3个bug检测工具:&lt;code&gt;Valgrind&lt;/code&gt;, &lt;code&gt;Purify&lt;/code&gt;, &lt;code&gt;CCured&lt;/code&gt;. 这三个工具都是用来检测内存相关的bug. 所以这里选择了8个内存相关的应用.&lt;/p&gt;
&lt;p&gt;CCured负载最小, 因为它在运行前进行了静态分析, 而且发现了所有bug. 尽管它的表现最好, 但是代价是高度依赖于人工预处理代码, 在使用CCured检测BC前用了3到4天学习BC代码和CCured规则去满足CCured语言的要求.&lt;/p&gt;
&lt;p&gt;Valgrind和Purify没有找到NCOM和COMP的bug. Valgrind在POLY, GZIP和MAN上存在很大的&lt;code&gt;detect latency&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;6-当前状态和未来工作&quot;&gt;&lt;a href=&quot;#6-当前状态和未来工作&quot; class=&quot;headerlink&quot; title=&quot;6 当前状态和未来工作&quot;&gt;&lt;/a&gt;6 当前状态和未来工作&lt;/h1&gt;
&lt;p&gt;Benchmark包括应用及其对应的文档和输入集合.&lt;/p&gt;
&lt;p&gt;目前正在设计工具从bug数据库(如 Bugzilla)自动提取bug, 这样做不但可以获取很多真实bug, 而且可以获取更深的insight. &lt;/p&gt;
&lt;p&gt;接下来的工作会在&lt;code&gt;BugBench&lt;/code&gt;上评价更多地bug检测工具. 同时也会考虑添加辅助工具, 比如程序标注的静态工具, 并发bug检测工具的调度和记录-重放工具.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-830_BugBench-Benchmarks-for-Evaluating-Bug-Detection/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-825_BLEU-a-Method-for-Automatic-Evaluation-of-Machine/" />
  <id>http://0.0.0.0:8081/2016-01-01-825_BLEU: a Method for Automatic Evaluation of Machine</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;翻译有三要素：恰当性，准确性，流畅性。本文提出了自动化评估翻译效果的方法。&lt;/p&gt;
&lt;h1 id=&quot;方法&quot;&gt;方法&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;人工给出若干个参考翻译，计算候选翻译的每个n-gram在参考翻译出现过的次数，除以总n-gram数&lt;/li&gt;
  &lt;li&gt;对于相同的n-gram，有效次数不超过参考翻译中出现的最大次数&lt;/li&gt;
  &lt;li&gt;惩罚短句，其中c为候选翻译长度，r为有效参考翻译长度（可选最短的那种）：
 &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
BP=left{
     begin{array}{rcl}
     1 &amp; if &amp;c&gt;r\
     e^{(1-r/c)} &amp; if &amp; c leq r
     end{array}
     right. %]]&gt;&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;计算$BLEU=BPcdot exp{left(sum^N_{n=1}w_nlog{p_n}right)}$或$log{BLEU}=min(1-r/c,0)+sum^N_{n=1}w_nlog{p_n}$
    &lt;h1 id=&quot;结论&quot;&gt;结论&lt;/h1&gt;
    &lt;p&gt;BLEU和人类判断成强正相关。&lt;/p&gt;
    &lt;h1 id=&quot;其它要点&quot;&gt;其它要点&lt;/h1&gt;
    &lt;p&gt;1-gram能衡量翻译的恰当性；更长的n-gram能衡量流畅性。&lt;br /&gt;
仅有1句参考翻译的情况下，BLEU也能很好地反映翻译质量。因此可以增大数据集的体量，每个样本只需1个参考，但数据集内需要有不同的翻译风格。&lt;br /&gt;
翻译可看成是文本生成，故BLEU也许也能用于文本总结等NLG任务。&lt;/p&gt;
    &lt;h1 id=&quot;备注&quot;&gt;备注&lt;/h1&gt;
    &lt;p&gt;adequacy 恰当性；适当性
fidelity 准确性；忠实性
stem from 出于，基于
case folding 大小写转换&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-825_BLEU-a-Method-for-Automatic-Evaluation-of-Machine/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-801_-Lua/" />
  <id>http://0.0.0.0:8081/2016-01-01-801_[Lua</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;读书笔记： Programming in Lua, 4th Edition.&lt;/p&gt;

&lt;h2 id=&quot;正常函数调用&quot;&gt;正常函数调用&lt;/h2&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;math.sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;math.cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;os.date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- add the elements of sequence &amp;#39;a&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if the function has one single argument and that argument is either a literal string or a table constructor,
then the parentheses are optional:&lt;/p&gt;

&lt;p&gt;如果函数只有一个参数，并且这个参数是字符串或者是table的话，函数的括号()可以省略。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--&amp;gt;    print(&amp;#34;Hello World&amp;#34;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dofile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;a.lua&amp;#39;&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--&amp;gt;    dofile (&amp;#39;a.lua&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[[a multi-line    &amp;lt;--&amp;gt;    print([[a multi-line
      message]]&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--&amp;gt;    f({x=10, y=20})&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--&amp;gt;    type({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can call a function with a number of arguments different from its number of parameters. Lua adjusts
the number of arguments to the number of parameters by throwing away extra arguments and supplying
nils to extra parameters. For instance, consider the next function:&lt;/p&gt;

&lt;p&gt;函数调用时提供的参数可以和函数定义时的参数个数不同。不足的用nil补全，多余的话会被自动忽略。&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;--&amp;gt; nil nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 3 nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 3 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 3 4 (5 is discarded)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;incCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;globalCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;multiple-results&quot;&gt;Multiple Results&lt;/h2&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- index of the maximum value&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- maximum value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- return the maximum and its index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 23 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lua always adjusts the number of results from a function to the circumstances of the call.&lt;/p&gt;

&lt;p&gt;When we call a function as a statement, Lua discards all results from the function.&lt;/p&gt;

&lt;p&gt;When we use a call as an expression (e.g., the operand of an addition), Lua keeps only the first result.&lt;/p&gt;

&lt;p&gt;We get all results only when the call is the last (or the only) expression in a list of expressions.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;-- returns no results&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- returns 1 result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- returns 2 results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;-- x=&amp;#34;a&amp;#34;, y=&amp;#34;b&amp;#34;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;-- x=&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34; is discarded&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- x=10, y=&amp;#34;a&amp;#34;, z=&amp;#34;b&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x=nil, y=nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x=&amp;#34;a&amp;#34;, y=nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x=&amp;#34;a&amp;#34;, y=&amp;#34;b&amp;#34;, z=nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that multiple results only happen when the call is the last (or only) expression in a list. A
function call that is not the last element in the list always produces exactly one result:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x=&amp;#34;a&amp;#34;, y=20 (&amp;#39;b&amp;#39; discarded)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- x=nil, y=20 (30 is discarded)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; (no results)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a b&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; ax (see next)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A constructor also collects all results from a call, without any adjustments:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- t = {} (an empty table)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- t = {&amp;#34;a&amp;#34;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- t = {&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As always, this behavior happens only when the call is the last expression in the list; calls in any other
position produce exactly one result:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- t[1] = nil, t[2] = &amp;#34;a&amp;#34;, t[3] = 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can force a call to return exactly one result by enclosing it in an extra pair of parentheses:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;variadic-functions-可变参数&quot;&gt;Variadic Functions 可变参数&lt;/h2&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ipairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lua offers the function table.pack.1 This function receives any number of arguments and returns a
new table with all its arguments (just like {…}), but this table has also an extra field “n”, with the total
number of arguments.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nonils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A call to select
has always one fixed argument, the selector, plus a variable number of extra arguments. If the selector is
a number n, select returns all arguments after the n-th argument; otherwise, the selector should be the
string “#”, so that select returns the total number of extra arguments.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; a b c&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; b c&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; c&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tableunpack&quot;&gt;table.unpack&lt;/h2&gt;

&lt;p&gt;A special function with multiple returns is table.unpack. It takes a list and returns as results all elements
from the list:&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;table.unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;--&amp;gt; 10 20 30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- a=10, b=20, 30 is discarded&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the name implies, table.unpack is the reverse of table.pack. While pack transforms a parameter
list into a real Lua list (a table), unpack transforms a real Lua list (a table) into a return list, which
can be given as the parameter list to another function.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;proper-tail-calls&quot;&gt;Proper Tail Calls&lt;/h2&gt;

&lt;p&gt;尾调用：也就是在一个函数A的最后调用一个函数B，因为函数A已经执行完了，所以函数B可以重复利用A的栈空间，提高效率。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-801_-Lua/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-796_-Lua-lua%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/" />
  <id>http://0.0.0.0:8081/2016-01-01-796_[Lua] lua性能优化技巧 </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;和在所有其他编程语言中一样，在Lua中，我们依然应当遵循下述两条有关程序优化的箴言：&lt;/p&gt;
&lt;h4 id=&quot;原则1不要做优化&quot;&gt;原则1：不要做优化。&lt;/h4&gt;
&lt;h4 id=&quot;原则2暂时不要做优化对专家而言&quot;&gt;原则2：暂时不要做优化（对专家而言）。&lt;/h4&gt;
&lt;h4 id=&quot;这两条原则对于lua编程来说尤其有意义lua正是因其性能而在脚本语言中鹤立鸡群&quot;&gt;这两条原则对于Lua编程来说尤其有意义，Lua正是因其性能而在脚本语言中鹤立鸡群。&lt;/h4&gt;
&lt;p&gt;当然，我们都知道性能是编程中要考量的一个重要因素，指数级时间复杂度的算法会被认为是棘手的问题，绝非偶然。如果计算结果来得太迟，它就是无用的结果。因此，每一个优秀的程序员都应该时刻平衡在优化代码时所花费的资源和执行代码时所节省的资源。&lt;/p&gt;
&lt;p&gt;优秀的程序员对于代码优化要提出的第一个问题是：“这个程序需要被优化吗？”如果（仅当此时）答案是肯定的，第二个问题则是：“在哪里优化？”&lt;/p&gt;
&lt;p&gt;要回答这样两个问题，我们需要制定一些标准。在进行有效的性能评定之前，不应该做任何优化工作。有经验的程序员和初学者之前的区别并非在于前者善于指出一个程序的主要性能开销所在，而是前者知道自己不善于做这件事情。&lt;/p&gt;
&lt;p&gt;几年前，Noemi Rodriguez和我开发了一个用于Lua的CORBA ORB[2]原型，之后演变为OiL。作为第一个原型，我们的实现的目标是简洁。为防止对额外的C函数库的依赖，这个原型在序列化整数时使用少量四则运算来分离各个字节（转换为以256为底），且不支持浮点值。由于CORBA视字符串为字符序列，我们的ORB最初也将Lua字符串转换为一个字符序列（也就是一个Lua表），并且将其和其他序列等同视之。&lt;/p&gt;
&lt;p&gt;当我们完成这个原型之后，我们把它的性能和一个使用C++实现的专业ORB进行对比。由于我们的ORB是使用Lua实现的，预期上我们可以容忍它的速度要慢一些，但是对比结果显示它慢得太多了，让我们非常失望。一开始，我们把责任归结于Lua本身；后来我们怀疑问题出在那些需要序列化整数的操作上。我们使用了一个非常简单的性能分析器（Profiler），与在《Lua程序设计》[3]第23章里描述的那个没什么太大差别。出乎我们意料的是，整数序列化并没有明显拖慢程序的速度，因为并没有太多整数需要序列化；反而是序列化字符串需要对低性能负很大责任。实际上，每一条CORBA消息都包含若干个字符串，即使我们没有显式地操作字符串亦是如此。而且序列化每一条字符串都是一个性能开销巨大的工作，因为它需要创建一个新表，并使用单独的字符填充；然后序列化整个序列，其中需要依次序列化每个字符。一旦我们将字符串序列化作为一种特殊情况（而不是通过通用的序列化流程）重新实现，整个程序的性能就得到了显著的提升。我们只是添加了几行代码，程序的性能已经和C++实现的那个版本有得一拼了[4]。&lt;/p&gt;
&lt;p&gt;因此，我们总是应该在优化性能之前进行性能测试。通过测试，才能了解到要优化什么；在优化后再次测试，来确认我们的优化工作确实带来了性能的提升。&lt;/p&gt;
&lt;p&gt;一旦你决定必须优化你的Lua代码，本文将可能有所帮助。本文描述了一些优化方式，主要是展示在Lua中怎么做会更慢，怎么做又会更快。在这里，我将不会讨论一些通用的优化技巧，例如优化算法等等——当然，你应该掌握和使用这些技巧，有很多其他地方可以了解这方面的内容。本文主要讨论一些专门针对Lua的优化技巧，与此同时，我还会持续地测试小程序的时间和空间性能。如果没有特别注明的话，所有的测试都在一台Pentium IV 2.9GHz、1GB内存、运行Ubuntu 7.10、Lua 5.1.1的机器上进行。我经常会给出实际的测量结果（例如7秒），但是这只在和其他测量数据进行对比时有意义。而当我说一个程序比另一个快X%时，意味着前者比后者少消耗X%的时间（也就是说，比另一个程序快100%的程序的运行不需要时间）；当我说一个程序比另一个慢X%时，则是说后者比前者快X%（意即，比另一个程序慢50%的程序消耗的时间是前者的两倍）。&lt;/p&gt;

&lt;p&gt;在运行任何代码之前，Lua都会把源代码翻译（预编译）成一种内部的格式。这种格式是一个虚拟机指令序列，与真实的CPU所执行的机器码类似。之后，这个内部格式将会被由一个包含巨大的switch结构的while循环组成的C代码解释执行，switch中的每个case对应一条指令。&lt;/p&gt;
&lt;p&gt;可能你已经在别处了解到，从5.0版开始，Lua使用一种基于寄存器的虚拟机。这里所说的虚拟机“寄存器”与真正的CPU寄存器并不相同，因为后者难于移植，而且数量非常有限。Lua使用一个栈（通过一个数组和若干索引来实现）来提供寄存器。每个活动的函数都有一个激活记录，也就是栈上的一个可供该函数存储寄存器的片段。因此，每个函数都有自己的寄存器[1]。一个函数可以使用最多250个寄存器，因为每个指令只有8位用于引用一个寄存器。&lt;/p&gt;
&lt;p&gt;由于寄存器数目众多，因此Lua预编译器可以把所有的局部变量都保存在寄存器里。这样带来的好处是，访问局部变量会非常快。例如，如果a和b是局部变量，语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = a + b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将只会生成一个指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADD 0 0 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（假设a和b在寄存器里分别对应0和1）。作为对比，如果a和b都是全局变量，那么这段代码将会变成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GETGLOBAL 0 0 ; a
GETGLOBAL 1 1 ; b
ADD 0 0 1
SETGLOBAL 0 0 ; a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此，可以很简单地得出在Lua编程时最重要的性能优化方式：使用局部变量！&lt;/p&gt;
&lt;p&gt;如果你想压榨程序的性能，有很多地方都可以使用这个方法。例如，如果你要在一个很长的循环里调用一个函数，可以预先将这个函数赋值给一个局部变量。比如说如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i = 1, 1000000 do
	local x = math.sin(i)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比下面这段要慢30%：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local sin = math.sin
for i = 1, 1000000 do
	local x = sin(i)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;访问外部局部变量（或者说，函数的上值）没有直接访问局部变量那么快，但依然比访问全局变量要快一些。例如下面的代码片段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo (x)
    for i = 1, 1000000 do
    x = x + math.sin(i)
    end
    return x
end
print(foo(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以优化为在foo外声明一次sin：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local sin = math.sin
function foo (x)
    for i = 1, 1000000 do
    	x = x + sin(i)
    end
    return x
end
print(foo(10))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二段代码比前者要快30%。&lt;/p&gt;
&lt;p&gt;尽管比起其他语言的编译器来说，Lua的编译器非常高效，但是编译依然是重体力活。因此，应该尽可能避免运行时的编译（例如使用loadstring函数），除非你真的需要有如此动态要求的代码，例如由用户输入的代码。只有很少的情况下才需要动态编译代码。&lt;/p&gt;
&lt;p&gt;例如，下面的代码创建一个包含返回常数值1到100000的若干个函数的表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local lim = 10000
local a = {}
for i = 1, lim do
	a[i] = loadstring(string.format(&amp;#34;return %d&amp;#34;, i))
end

print(a[10]()) --&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行这段代码需要1.4秒。&lt;/p&gt;
&lt;h1 id=&quot;表&quot;&gt;表&lt;/h1&gt;
&lt;p&gt;一般情况下，你不需要知道Lua实现表的细节，就可以使用它。实际上，Lua花了很多功夫来隐藏内部的实现细节。但是，实现细节揭示了表操作的性能开销情况。因此，要优化使用表的程序（这里特指Lua程序），了解一些表的实现细节是很有好处的。&lt;/p&gt;
&lt;p&gt;Lua的表的实现使用了一些很聪明的算法。每个Lua表的内部包含两个部分：数组部分和哈希部分。数组部分以从1到一个特定的n之间的整数作为键来保存元素（我们稍后即将讨论这个n是如何计算出来的）。所有其他元素（包括在上述范围之外的整数键）都被存放在哈希部分里。&lt;/p&gt;
&lt;p&gt;正如其名，哈希部分使用哈希算法来保存和查找键。它使用被称为开放地址表的实现方式，意思是说所有的元素都保存在哈希数组中。用一个哈希函数来获取一个键对应的索引；如果存在冲突的话（意即，如果两个键产生了同一个哈希值），这些键将会被放入一个链表，其中每个元素对应一个数组项。当Lua需要向表中添加一个新的键，但哈希数组已满时，Lua将会重新哈希。重新哈希的第一步是决定新的数组部分和哈希部分的大小。因此，Lua遍历所有的元素，计数并对其进行归类，然后为数组部分选择一个大小，这个大小相当于能使数组部分超过一半的空间都被填满的2的最大的幂；然后为哈希部分选择一个大小，相当于正好能容纳哈希部分所有元素的2的最小的幂。&lt;/p&gt;
&lt;p&gt;当Lua创建空表时，两个部分的大小都是0。因此，没有为其分配数组。让我们看一看当执行下面的代码时会发生什么：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local a = {}
for i = 1, 3 do
	a[i] = true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码始于创建一个空表。在循环的第一次迭代中，赋值语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a[1] = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;触发了一次重新哈希；Lua将数组部分的大小设为1，哈希部分依然为空；第二次迭代时&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a[2] = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;触发了另一次重新哈希，将数组部分扩大为2.最终，第三次迭代又触发了一次重新哈希，将数组部分的大小扩大为4。&lt;/p&gt;
&lt;p&gt;类似下面的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = {}
a.x = 1; a.y = 2; a.z = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;做的事情类似，只不过增加的是哈希部分的大小。&lt;/p&gt;
&lt;p&gt;对于大的表来说，初期的几次重新哈希的开销被分摊到整个表的创建过程中，一个包含三个元素的表需要三次重新哈希，而一个有一百万个元素的表也只需要二十次。但是当创建几千个小表的时候，重新哈希带来的性能影响就会非常显著。&lt;/p&gt;
&lt;p&gt;旧版的Lua在创建空表时会预选分配大小（4，如果我没有记错的话），以防止在初始化小表时产生的这些开销。但是这样的实现方式会浪费内存。例如，如果你要创建数百万个点（表现为包含两个元素的表），每个都使用了两倍于实际所需的内存，就会付出高昂的代价。这也是为什么Lua不再为新表预分配数组。&lt;/p&gt;
&lt;p&gt;如果你使用C编程，可以通过Lua的API函数lua_createtable来避免重新哈希；除lua_State之外，它还接受两个参数：数组部分的初始大小和哈希部分的初始大小[1]。只要指定适当的值，就可以避免初始化时的重新哈希。需要警惕的是，Lua只会在重新哈希时收缩表的大小，因此如果在初始化时指定了过大的值，Lua可能永远不会纠正你浪费的内存空间。&lt;/p&gt;
&lt;p&gt;当使用Lua编程时，你可能可以使用构造式来避免初始化时的重新哈希。当你写下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{true, true, true}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;时，Lua知道这个表的数组部分将会有三个元素，因此会创建相应大小的数组。类似的，如果你写下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{x = 1, y = 2, z = 3}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lua也会为哈希部分创建一个大小为4的数组。例如，执行下面的代码需要2.0秒：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i = 1, 1000000 do
    local a = {}
    a[1] = 1; a[2] = 2; a[3] = 3
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果在创建表时给定正确的大小，执行时间可以缩减到0.7秒：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i = 1, 1000000 do
    local a = {true, true, true}
    a[1] = 1; a[2] = 2; a[3] = 3
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，如果你写类似于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{[1] = true, [2] = true, [3] = true}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;的代码，Lua还不够聪明，无法识别表达式（在本例中是数值字面量）指定的数组索引，因此它会为哈希部分创建一个大小为4的数组，浪费内存和CPU时间。&lt;/p&gt;
&lt;p&gt;两个部分的大小只会在Lua重新哈希时重新计算，重新哈希则只会发生在表完全填满后，Lua需要插入新的元素之时。因此，如果你遍历一个表并清除其所有项（也就是全部设为nil），表的大小不会缩小。但是此时，如果你需要插入新的元素，表的大小将会被调整。多数情况下这都不会成为问题，但是，不要指望能通过清除表项来回收内存：最好是直接把表自身清除掉。&lt;/p&gt;
&lt;p&gt;一个可以强制重新哈希的猥琐方法是向表中插入足够多的nil。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = {}
lim = 10000000
for i = 1, lim do a[i] = i end              -- 创建一个巨表
print(collectgarbage(&amp;#34;count&amp;#34;))              --&amp;gt; 196626
for i = 1, lim do a[i] = nil end            -- 清除所有元素
print(collectgarbage(&amp;#34;count&amp;#34;))              --&amp;gt; 196626
for i = lim + 1, 2 * lim do a[i] = nil end -- 创建一堆nil元素
print(collectgarbage(&amp;#34;count&amp;#34;))              --&amp;gt; 17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除非是在特殊情况下，我不推荐使用这个伎俩：它很慢，并且没有简单的方法能知道要插入多少nil才够。&lt;/p&gt;
&lt;p&gt;你可能会好奇Lua为什么不会在清除表项时收缩表。首先是为了避免测试写入表中的内容。如果在赋值时检查值是否为nil，将会拖慢所有的赋值操作。第二，也是最重要的，允许在遍历表时将表项赋值为nil。例如下面的循环：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for k, v in pairs(t) do
    if some_property(v) then
        t[k] = nil – 清除元素
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果Lua在每次nil赋值后重新哈希这张表，循环就会被破坏。&lt;/p&gt;
&lt;p&gt;如果你想要清除一个表中的所有元素，只需要简单地遍历它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for k in pairs(t) do
    t[k] = nil
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个“聪明”的替代解决方案：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while true do
    local k = next(t)
    if not k then break end
    t[k] = nil
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，对于大表来说，这个循环将会非常慢。调用函数next时，如果没有给定前一个键，将会返回表的第一个元素（以某种随机的顺序）。在此例中，next将会遍历这个表，从开始寻找一个非nil元素。由于循环总是将找到的第一个元素置为nil，因此next函数将会花费越来越长的时间来寻找第一个非nil元素。这样的结果是，这个“聪明”的循环需要20秒来清除一个有100,000个元素的表，而使用pairs实现的循环则只需要0.04秒。&lt;/p&gt;
&lt;p&gt;通过使用闭包，我们可以避免使用动态编译。下面的代码只需要十分之一的时间完成相同的工作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function fk (k)
    return function () return k end
end

local lim = 100000
local a = {}
for i = 1, lim do a[i] = fk(i) end

print(a[10]()) --&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;字符串&quot;&gt;字符串&lt;/h1&gt;
&lt;p&gt;与表类似，了解Lua如何实现字符串可以让你更高效地使用它。&lt;/p&gt;
&lt;p&gt;Lua实现字符串的方式与多数其他脚本语言所采用的两种主要方式都不相同。首先，Lua中的所有字符串都是内部化[1]的，这意味着Lua维护着任何字符串的一个单一拷贝。当一个新字符串出现时，Lua检查是否有现成的拷贝，如果有的话，重用之。内部化使得诸如字符串对比和索引表之类的操作非常快速，但是会降低创建字符串的速度。&lt;/p&gt;
&lt;p&gt;第二，Lua中的变量从不存储字符串，只是引用它们。这种实现方式可以加快很多字符串操作，例如在Perl中，当你写类似于$x=$y的代码、$y是一个字符串时，赋值操作会将字符串的内容从$y的缓冲区复制到$x的缓冲区。如果这个字符串很长，这个操作的开销就很大。而在Lua中，这个赋值仅仅是一次指针的复制。&lt;/p&gt;
&lt;p&gt;然而，这种引用实现会降低特定方式的字符串连接的速度。在Perl中，操作$s = $s . &amp;#34;x&amp;#34;和$s .= &amp;#34;x&amp;#34;区别非常大，对于前者，你获得了$s的一个拷贝，并且追加&amp;#34;x&amp;#34;到它的尾部；而对于后者，&amp;#34;x&amp;#34;只是简单地被追加到$s所维护的内部缓冲区的尾部。因此，后者无关于字符串的长度（假设缓冲区足够放下追加的文本）。如果把这两句代码放进循环里，它们的区别就是线性和二次算法的区别。例如，下述循环需要大约五分钟来读取一个5MB的文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$x = &amp;#34;&amp;#34;;
while (&amp;lt;&amp;gt;)
{
    $x = $x . $_;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们把&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$x = $x . $_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$x .= $_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;耗时将会降低为0.1秒！&lt;/p&gt;
&lt;p&gt;Lua没有提供第二种，也就是更快速的方式，因为它的变量没有内部缓冲区。因此，我们需要一个显式的缓冲区：一个包含字符串片段的表来完成这项工作。下面的循环读取相同的5MB的文件，需要0.28秒，虽然没有Perl那么快，也还算不错：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local t = {}
for line in io.lines() do
    t[#t + 1] = line
end
s = table.concat(t, &amp;#34;n&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;资源回收&quot;&gt;资源回收&lt;/h1&gt;
&lt;p&gt;当处理Lua资源时，我们也应该遵循提倡用于地球资源的3R原则——Reduce, Reuse and Recycle，即削减、重用和回收。&lt;/p&gt;
&lt;p&gt;削减是最简单的方式。有很多方法可以避免使用新的对象，例如，如果你的程序使用了太多的表，可以考虑改变数据的表述形式。一个最简单的例子，假设你的程序需要操作折线，最自然的表述形式是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;polyline =
{
    { x = 10.3, y = 98.5 },
    { x = 10.3, y = 18.3 },
    { x = 15.0, y = 98.5 },
    --...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;尽管很自然，这种表述形式对于大规模的折线来说却不够经济，因为它的每个点都需要用一个表来描述。第一种替代方式是使用数组来记录，可以省点内存：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;polyline =
{
     { 10.3, 98.5 },
     { 10.3, 18.3 },
     { 15.0, 98.5 },
     --...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于一个有一百万个点的折线来说，这个修改可以把内存占用从95KB降低到65KB。当然，你需要在可读性上付出代价：p[i].x比p[i][1]更易懂。&lt;/p&gt;
&lt;p&gt;另一个更经济的做法是使用一个数组存储所有x坐标，另一个存储所有y坐标：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;polyline =
{
    x = { 10.3, 10.3, 15.0, ...},
    y = { 98.5, 18.3, 98.5, ...}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原有的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p[i].x    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在变成了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p.x[i]    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用这种表述形式，一百万个点的折线的内存占用降低到了24KB。&lt;/p&gt;
&lt;p&gt;循环是寻找降低垃圾回收次数的机会的好地方。例如，如果在循环里创建一个不会改变的表，你可以把它挪到循环外面，甚至移到函数外作为上值。试对比：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo (...)
     for i = 1, n do
          local t = {1, 2, 3, &amp;#34;hi&amp;#34;}
          -- 做一些不会改变t表的事情
          --...
     end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local t = {1, 2, 3, &amp;#34;hi&amp;#34;} -- 创建t，一劳永逸
function foo (...)
    for i = 1, n do
        --做一些不会改变t表的事情
        --...
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相同的技巧亦可用于闭包，只要你不把它们移到需要它们的作用域之外。例如下面的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function changenumbers (limit, delta)
    for line in io.lines() do
        line = string.gsub(line, &amp;#34;%d+&amp;#34;, function (num)
            num = tonumber(num)
            if num &amp;gt;= limit then return tostring(num + delta) end
            -- 否则不返回任何值，保持原有数值
        end)
        io.write(line, &amp;#34;n&amp;#34;)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以通过将内部的函数移到循环外面来避免为每次迭代创建新的闭包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function changenumbers (limit, delta)
    local function aux (num)
        num = tonumber(num)
        if num &amp;gt;= limit then return tostring(num + delta) end
    end
    for line in io.lines() do
        line = string.gsub(line, &amp;#34;%d+&amp;#34;, aux)
        io.write(line, &amp;#34;n&amp;#34;)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，我们不能把aux移到changenumbers函数之外，因为aux需要访问limit和delta。&lt;/p&gt;
&lt;p&gt;对于多种字符串处理，我们可以通过使用现有字符串的索引来减少对创建新字符串的需要。例如，string.find函数返回它找到指定模式的位置索引，而不是匹配到的字符串。通过返回索引，它避免了在成功匹配时创建新的字符串。当有必要时，程序员可以通过调用string.sub来获取匹配的子串[1]。&lt;/p&gt;
&lt;p&gt;当我们无法避免使用新的对象时，我们依然可以通过重用来避免创建新的对象。对于字符串来说，重用没什么必要，因为Lua已经为我们做了这样的工作：它总是将所有用到的字符串内部化，并在所有可能的时候重用。然而对于表来说，重用可能就非常有效。举一个普遍的例子，让我们回到在循环里创建表的情况。这一次，表里的内容不再是不变的。通常我们可以在所有迭代中重用这个表，只需要简单地改变它的内容。考虑如下的代码段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local t = {}
for i = 1970, 2000 do
    t[i] = os.time({year = i, month = 6, day = 14})
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面的代码是等同的，但是重用了这张表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;local t = {}
local aux = {year = nil, month = 6, day = 14}
for i = 1970, 2000 do
    aux.year = i
    t[i] = os.time(aux)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实现重用的一个尤其有效的方式是缓存化[2]。基本思想非常简单，将指定输入对应的计算结果存储下来，当下一次再次接受相同的输入时，程序只需简单地重用上次的计算结果。&lt;/p&gt;
&lt;p&gt;LPeg，Lua的一个新的模式匹配库，就使用了一个有趣的缓存化处理。LPeg将每个模式字符串编译为一个内部的用于匹配字符串的小程序，比起匹配本身而言，这个编译过程开销很大，因此LPeg将编译结果缓存化以便重用。只需一个简单的表，以模式字符串为键、编译后的小程序为值进行记录。&lt;/p&gt;
&lt;p&gt;使用缓存化时常见的一个问题是，存储计算结果所带来的内存开销大过重用带来的性能提升。为了解决这个问题，我们可以在Lua里使用一个弱表来记录计算结果，因此没有使用到的结果最终将会被回收。&lt;/p&gt;
&lt;p&gt;在Lua中，利用高阶函数，我们可以定义一个通用的缓存化函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function memoize (f)
    local mem = {} -- 缓存化表
    setmetatable(mem, {__mode = &amp;#34;kv&amp;#34;}) -- 设为弱表
    return function (x) -- ‘f’缓存化后的新版本
        local r = mem[x]
        if r == nil then --没有之前记录的结果？
            r = f(x) --调用原函数
            mem[x] = r --储存结果以备重用
        end
        return r
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于任何函数f，memoize(f)返回与f相同的返回值，但是会将之缓存化。例如，我们可以重新定义loadstring为一个缓存化的版本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;loadstring = memoize(loadstring)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新函数的使用方式与老的完全相同，但是如果在加载时有很多重复的字符串，性能会得到大幅提升。&lt;/p&gt;
&lt;p&gt;如果你的程序创建和删除太多的协程，循环利用将可能提高它的性能。现有的协程API没有直接提供重用协程的支持，但是我们可以设法绕过这一限制。对于如下协程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;co = coroutine.create(function (f)
    while f do
        f = coroutine.yield(f())
    end
end)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个协程接受一项工作（运行一个函数），执行之，并且在完成时等待下一项工作。&lt;/p&gt;
&lt;p&gt;Lua中的多数回收都是通过垃圾回收器自动完成的。Lua使用渐进式垃圾回收器，意味着垃圾回收工作会被分成很多小步，（渐进地）在程序的允许过程中执行。渐进的节奏与内存分配的速度成比例，每当分配一定量的内存，就会按比例地回收相应的内存；程序消耗内存越快，垃圾回收器尝试回收内存也就越快。&lt;/p&gt;
&lt;p&gt;如果我们在编写程序时遵循削减和重用的原则，通常垃圾回收器不会有太多的事情要做。但是有时我们无法避免制造大量的垃圾，垃圾回收器的工作也会变得非常繁重。Lua中的垃圾回收器被调节为适合平均水平的程序，因此它在多数程序中工作良好。但是，在特定的时候我们可以通过调整垃圾回收器来获取更好的性能。通过在Lua中调用函数collectgarbage，或者在C中调用lua_gc，来控制垃圾回收器。它们的功能相同，只不过有不同的接口。在本例中我将使用Lua接口，但是这种操作通常在C中进行更好。&lt;/p&gt;
&lt;p&gt;collectgarbage函数提供若干种功能：它可以停止或者启动垃圾回收器、强制进行一次完整的垃圾回收、获取Lua占用的总内存，或者修改影响垃圾回收器工作节奏的两个参数。它们在调整高内存消耗的程序时各有用途。&lt;/p&gt;
&lt;p&gt;“永远”停止垃圾回收器可能对于某些批处理程序很有用。这些程序创建若干数据结构，根据它们生产出一些输出值，然后退出（例如编译器）。对于这样的程序，试图回收垃圾将会是浪费时间，因为垃圾量很少，而且内存会在程序执行完毕后完整释放。&lt;/p&gt;
&lt;p&gt;对于非批处理程序，停止垃圾回收器则不是个好主意。但是，这些程序可以在某些对时间极度敏感的时期暂停垃圾回收器，以提高时间性能。如果有需要的话，这些程序可以获取垃圾回收器的完全控制，使其始终处于停止状态，仅在特定的时候显式地进行一次强制的步进或者完整的垃圾回收。例如，很多事件驱动的平台都提供一个选项，可以设置空闲函数，在没有消息需要处理时调用。这正是调用垃圾回收的绝好时机（在Lua 5.1中，每当你在垃圾回收器停止的状态下进行强制回收，它都会恢复运转，因此，如果要保持垃圾回收器处于停止状态，必须在强制回收后立刻调用collectgarbage(“stop”)）。&lt;/p&gt;
&lt;p&gt;最后，你可能希望实施调整回收器的参数。垃圾回收器有两个参数用于控制它的节奏：第一个，称为暂停时间，控制回收器在完成一次回收之后和开始下次回收之前要等待多久；第二个参数，称为步进系数，控制回收器每个步进回收多少内容。粗略地来说，暂停时间越小、步进系数越大，垃圾回收越快。这些参数对于程序的总体性能的影响难以预测，更快的垃圾回收器显然会浪费更多的CPU周期，但是它会降低程序的内存消耗总量，并可能因此减少分页。只有谨慎地测试才能给你最佳的参数值。&lt;/p&gt;
&lt;p&gt;正如我们在前言里所说，优化是一个技巧性很强的工作，从程序是否需要优化开始，有若干个方面的内容需要考量。如果程序真的有性能问题，那么我们应该将精力集中于优化哪里和如何优化。&lt;/p&gt;
&lt;p&gt;我们在这里讨论的技巧既不是唯一的，也不是最重要的方面。我们在这里专注于讨论专门针对Lua的优化方式，因为有很多其他的方式可以了解通用的程序优化技巧。&lt;/p&gt;
&lt;p&gt;在本文结束之前，我还想介绍两种从更大的尺度上优化Lua程序性能的方式，但是它们都牵涉到Lua代码之外的修改。第一个是使用LuaJIT[1]，一个Lua的即时编译器，由Mike Pall开发。他所作的工作非常卓越，而且LuaJIT可能是所有动态语言里最快的JIT了。使用它的代价是它只能在x86架构上运行，而且你需要一个非标准的Lua解释器（LuaJIT）来运行你的程序。所获得的好处是你可以在不修改代码的情况下让程序的运行速度提高到原先的5倍。第二个方式是将部分代码移到C中实现。这一条的重点在于为C代码选择合适的粒度。一方面，如果你把一些非常简单的函数移动到C里，Lua和C之间的通讯开销会抵消使用C编写函数带来的性能优势；另一方面，如果你把太大的函数移到C里，你又失去了Lua所提供的灵活性。最后，还要注意的是这两种方式有时候是不兼容的。你把越多的代码移到C里，LuaJIT所能带来的优化就越少&lt;/p&gt;
&lt;h1 id=&quot;have-fun-_&quot;&gt;Have fun ^_^&lt;/h1&gt;
&lt;hr /&gt;

&lt;script async=&quot;&quot; defer=&quot;&quot; src=&quot;https://buttons.github.io/buttons.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Please &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi/hexo-theme-tsangsi&quot; data-icon=&quot;octicon-star&quot; aria-label=&quot;Star tsangsi/hexo-theme-tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Star&lt;/a&gt; this Project if you like it! &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi&quot; aria-label=&quot;Follow @tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Follow&lt;/a&gt; would also be appreciated!&lt;br /&gt;
Peace!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &amp;lt;hr/&amp;gt;
            
            

            &amp;lt;br/&amp;gt;

            
            
            

            &amp;lt;br/&amp;gt;
            
            
                
                
                &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css&quot;/&amp;gt;
                &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
            
            
            &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-796_-Lua-lua%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-795_-%E8%BD%AC-%E5%9C%A8Lua%E4%B8%AD%E4%BD%BF%E7%94%A8gettext%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/" />
  <id>http://0.0.0.0:8081/2016-01-01-795_[转]在Lua中使用gettext实现多语言支持</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;本文系&lt;strong&gt;转载&lt;/strong&gt;，原文链接：&lt;a href=&quot;http://zengrong.net/post/1986.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://zengrong.net/post/1986.htm&lt;/a&gt;&lt;br /&gt;感谢原作者无私分享。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://zengrong.net/post/1986.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;在Lua中使用gettext实现多语言支持&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2016-06-07更新&lt;/strong&gt;：加入gettext包含的工具简介。&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/gettext/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GNU gettext&lt;/a&gt; 是一套优秀的国际化工具。在 linux 中被大量采用。wordpress 也使用 gettext 实现多语言支持。&lt;/p&gt;
&lt;p&gt;本文介绍如何在 quick-cocos2d-x 中使用 gettext 做多语言支持。同时介绍多语言翻译工具 &lt;a href=&quot;http://www.poedit.net&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;poedit&lt;/a&gt; 对 Lua 语言的支持。&lt;/p&gt;
&lt;h2 id=&quot;gettext-简介&quot;&gt;&lt;a href=&quot;#gettext-简介&quot; class=&quot;headerlink&quot; title=&quot;gettext 简介&quot;&gt;&lt;/a&gt;gettext 简介&lt;/h2&gt;
&lt;p&gt;gettext 是一套工具集的名称。这套工具集包含 xgettext/msginit/msgfmt 等一套建立模版(POT)、创建PO文件和编译MO文件的工具。&lt;/p&gt;
&lt;p&gt;gettext 包含的工具如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xgettext 从源码中生成POT模版或直接生成PO文件；&lt;/li&gt;
&lt;li&gt;msginit 基于POT文件生成待翻译的PO文件；&lt;/li&gt;
&lt;li&gt;msgfmt 将PO文件编译成二进制的MO文件；&lt;/li&gt;
&lt;li&gt;msgunfmt 顾名思义，将MO文件反编译成PO文件；&lt;/li&gt;
&lt;li&gt;msgmerge 将POT模版文件与PO文件合并。用于在源码更新之后将新的待翻译内容更新到已经翻译的PO文件中；&lt;/li&gt;
&lt;li&gt;msgcat 将多个PO文件合并在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 gettext 需要涉及这样几个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源码&lt;br /&gt;程序的源代码，本文中是 lua 文件；&lt;/li&gt;
&lt;li&gt;POT 文件&lt;br /&gt;从源码中扫描得到的翻译模版文件，原始语言取决于源码字符串中使用的自然语言，建议使用英文。纯文本格式；&lt;/li&gt;
&lt;li&gt;PO 文件&lt;br /&gt;根据 POT 文件建立的各种语言版本的待翻译文件，其中包含原始语言和被翻译的目标语言。纯文本格式；&lt;/li&gt;
&lt;li&gt;MO 文件&lt;br /&gt;供最终软件实际使用的文件，使用 PO 编译而成。二进制格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般的工作流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在源码中使用约定的语法来书写字符串，C语言默认是 &lt;code&gt;gettext(&amp;#34;my text&amp;#34;)&lt;/code&gt;。在本文中，将使用 &lt;code&gt;_(&amp;#34;my text&amp;#34;)&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;使用 xgettext 从源码中扫描出需要翻译的文本，建立 POT 文件；&lt;/li&gt;
&lt;li&gt;使用 msginit 命令根据 POT 文件建立 PO 文件。或者直接在上一步也可以直接建立 PO 文件；&lt;/li&gt;
&lt;li&gt;进行人工翻译（当然也可以进行机器翻译），翻译的结果保存在 PO 文件中；&lt;/li&gt;
&lt;li&gt;使用 msgfmt 命令将 PO 文件编译成 MO 文件；&lt;/li&gt;
&lt;li&gt;在程序中实现调用命令，本文中是 &lt;code&gt;_&lt;/code&gt; 函数，这个函数将读取并解析 MO 文件，根据调用的原始语言文本返回翻译之后的文本。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Poedit-简介&quot;&gt;&lt;a href=&quot;#Poedit-简介&quot; class=&quot;headerlink&quot; title=&quot;Poedit 简介&quot;&gt;&lt;/a&gt;Poedit 简介&lt;/h2&gt;
&lt;p&gt;gettext 提供的工具集都是基于命令行的，有些程序员并不习惯命令行。它也没有提供用于翻译工作者的对照翻译工具。&lt;/p&gt;
&lt;p&gt;而 &lt;a href=&quot;http://www.poedit.net&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Poedit&lt;/a&gt; 则提供了一切。&lt;/p&gt;
&lt;p&gt;Poedit 可以从源码中提取文本生成 PO 文件，也提供了一个GUI界面用于对照翻译。它还可以直接生成最终的 MO 文件。&lt;/p&gt;
&lt;p&gt;当然，在GUI之后，它依然是使用 gettext 来处理的，但这些具体的细节被隐藏了。&lt;/p&gt;
&lt;h2 id=&quot;使用-Poedit-生成和翻译-PO-文件&quot;&gt;&lt;a href=&quot;#使用-Poedit-生成和翻译-PO-文件&quot; class=&quot;headerlink&quot; title=&quot;使用 Poedit 生成和翻译 PO 文件&quot;&gt;&lt;/a&gt;使用 Poedit 生成和翻译 PO 文件&lt;/h2&gt;
&lt;h3 id=&quot;软件设置&quot;&gt;&lt;a href=&quot;#软件设置&quot; class=&quot;headerlink&quot; title=&quot;软件设置&quot;&gt;&lt;/a&gt;软件设置&lt;/h3&gt;
&lt;p&gt;1.开启 Poedit，执行 File - Preferences 命令，填入自己的个人信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit4.png&quot; alt=&quot;Preferences&quot; /&gt;&lt;/p&gt;
&lt;p&gt;2.切换到 Editor tab，选中 Automatically compile .mo file on save 和 Show summary after catalog update 两项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit5.png&quot; alt=&quot;Editor&quot; /&gt;&lt;/p&gt;
&lt;p&gt;3.切换到 Parsers tab，这里提供了几种源码解析器，但默认没有Lua。我们下面将加入Lua源码解析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit6.png&quot; alt=&quot;Parses&quot; /&gt;&lt;/p&gt;
&lt;p&gt;4.点击 New 新建一个源码解析器，进行如下图的设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit7.png&quot; alt=&quot;Parse setup&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这些设置基本上与 C/C++ 的设置一致，只是修改了扩展名支持以及 Parser command 栏位。在 xgettext 命令的参数中，-C 就是 –language=C 的简写。&lt;/p&gt;
&lt;p&gt;接下来将新建一个项目进行设置。&lt;/p&gt;
&lt;h3 id=&quot;项目设置&quot;&gt;&lt;a href=&quot;#项目设置&quot; class=&quot;headerlink&quot; title=&quot;项目设置&quot;&gt;&lt;/a&gt;项目设置&lt;/h3&gt;
&lt;p&gt;1.执行 File - New catelog… 命令，在 Translation properties tab 中加入自己的信息。这里的 Language 选项只是个显示选项而已，并不能决定你使用的是何种语言，也不和刚才的软件设置中的 Parsers 相关。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit1.png&quot; alt=&quot;Translation properties&quot; /&gt;&lt;/p&gt;
&lt;p&gt;2.设定源代码路径，这个非常重要。&lt;/p&gt;
&lt;p&gt;我采用 quick 默认的目录风格，所有的源码放在 scripts 中。同时我建立了一个新的 i18n 目录，这个目录与 scripts 目录同级。生成的 PO 文件将保存在这个目录中。&lt;/p&gt;
&lt;p&gt;那么对于当前正在编辑的 PO 文件来说， Base path 就应该设置成 &lt;code&gt;..scripts&lt;/code&gt; ， 下面的 Paths 就应该加入 . 这个路径。注意在 Windows 下， Base path 的路径分隔符必须采用 Windows 的格式（反斜杠  ），而不应该使用 / 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit2.png&quot; alt=&quot;Sources paths&quot; /&gt;&lt;/p&gt;
&lt;p&gt;3.设定源代码关键词&lt;/p&gt;
&lt;p&gt;前面我们已经确定了自己的关键词，那就是 &lt;code&gt;_&lt;/code&gt; 。当然我们也可以使用 C 语言的默认关键词 &lt;code&gt;gettext&lt;/code&gt; ，但那样未免长了一点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit3.png&quot; alt=&quot;Sources paths&quot; /&gt;&lt;/p&gt;
&lt;p&gt;4.设定完毕后，将项目保存为 &lt;code&gt;i18n/zh_CN.po&lt;/code&gt; ，请注意我上面强调过的第2步。&lt;/p&gt;
&lt;h3 id=&quot;解析源码&quot;&gt;&lt;a href=&quot;#解析源码&quot; class=&quot;headerlink&quot; title=&quot;解析源码&quot;&gt;&lt;/a&gt;解析源码&lt;/h3&gt;
&lt;p&gt;一切设定成功之后，直接按下主界面上的 &lt;code&gt;Update&lt;/code&gt; 按钮即可解析源码。Poedit 会将源码中解析到的使用 &lt;code&gt;_(&amp;#34;my text&amp;#34;)&lt;/code&gt; 格式的关键词，将其中的字符串提取处理显示在主界面中。&lt;/p&gt;
&lt;p&gt;我们可以在主界面中对关键词进行翻译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit8.png&quot; alt=&quot;main scene&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果源码有更新，再次单击 &lt;code&gt;Update&lt;/code&gt; 按钮重新解析源码。这是如果解析到新的字符串，或者有字符串不再使用，Poedit都会进行提示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit9.png&quot; alt=&quot;New string&quot; /&gt;&lt;br /&gt;&lt;img src=&quot;https://sgamerw.github.io/poedit10.png&quot; alt=&quot;Obsolete string&quot; /&gt;&lt;/p&gt;
&lt;p&gt;需要注意的一点是，在 Lua 的注释中不要包含半角的单引号。&lt;/p&gt;
&lt;p&gt;这是由于 Lua 的注释使用 – 符号，而 C 语言使用 // ，所以 gettext 会认为 Lua 中的注释是代码的一部分而不会忽略解析。在一般情况没有什么问题，但如果在注释中包含了半角的单引号（这是在 C 语言中代表字面值），gettext 就会认为语法错误因此产生解析错误。&lt;/p&gt;
&lt;h3 id=&quot;生成-MO-文件&quot;&gt;&lt;a href=&quot;#生成-MO-文件&quot; class=&quot;headerlink&quot; title=&quot;生成 MO 文件&quot;&gt;&lt;/a&gt;生成 MO 文件&lt;/h3&gt;
&lt;p&gt;在软件设置中，我们设置了在保存项目的时候自动生成 MO 文件，所以这点不用操心了。生成的 MO 文件与 PO 文件在相同的目录。&lt;/p&gt;
&lt;h2 id=&quot;在-Lua-中解析-MO-文件&quot;&gt;&lt;a href=&quot;#在-Lua-中解析-MO-文件&quot; class=&quot;headerlink&quot; title=&quot;在 Lua 中解析 MO 文件&quot;&gt;&lt;/a&gt;在 Lua 中解析 MO 文件&lt;/h2&gt;
&lt;p&gt;MO 是个二进制格式的文件，我们的程序在读取它的时候，需要分析 &lt;a href=&quot;http://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/MO-Files.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;它的结构&lt;/a&gt; ，将它解析成 &lt;code&gt;原始文本 - 翻译文本&lt;/code&gt; 的键值对形式，供我们使用。&lt;/p&gt;
&lt;p&gt;许多语言中已经包含了 MO 文件的解析库，但是 Lua 没有。所以我们需要自己写一个。&lt;/p&gt;
&lt;p&gt;不过 &lt;a href=&quot;http://lua-users.org/lists/lua-l/2010-04/msg00005.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;J.J?rgen von Bargen&lt;/a&gt; 已经完成了这件事，我将他的代码进行了简单封装，将其放在我的 lua 库中了，名称是 &lt;a href=&quot;https://github.com/zrong/lua#Gettext&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;utils.Gettext&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于要支持跨平台的原因，读取 MO 文件采用的是 CCFileUtils ，如果要在其他环境中使用，可以改用 io 库。我在 &lt;code&gt;Gettext._getFileData&lt;/code&gt; 中保留了使用 io 库的代码，只是将其注释了。&lt;/p&gt;
&lt;h2 id=&quot;综合范例&quot;&gt;&lt;a href=&quot;#综合范例&quot; class=&quot;headerlink&quot; title=&quot;综合范例&quot;&gt;&lt;/a&gt;综合范例&lt;/h2&gt;
&lt;p&gt;使用这种方法，MO 文件会被解析成功一个 table 返回：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; mo_data=&lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#34;utils.Gettext&amp;#34;&lt;/span&gt;).loadMOFromFile(&lt;span class=&quot;string&quot;&gt;&amp;#34;res/zh_CN.mo&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(mo_data[&lt;span class=&quot;string&quot;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;])&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(mo_data[&lt;span class=&quot;string&quot;&gt;&amp;#34;Foobar&amp;#34;&lt;/span&gt;])&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- nil&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更通用的方法是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_ = &lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#34;utils.Gettext&amp;#34;&lt;/span&gt;).gettextFromFile(&lt;span class=&quot;string&quot;&gt;&amp;#34;res/zh_CN.mo&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(_(&lt;span class=&quot;string&quot;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在我的游戏中，则是这样使用的：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LANG = &lt;span class=&quot;string&quot;&gt;&amp;#34;res/zh_CN.mo&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(__text)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; __text&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; CCFileUtils:sharedFileUtils():isFileExist(LANG) &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;    _ = &lt;span class=&quot;built_in&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#34;utils.Gettext&amp;#34;&lt;/span&gt;).gettextFromFile(LANG))&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-795_-%E8%BD%AC-%E5%9C%A8Lua%E4%B8%AD%E4%BD%BF%E7%94%A8gettext%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-763_-Lua-lua-%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0%E5%88%B0%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0/" />
  <id>http://0.0.0.0:8081/2016-01-01-763_[Lua] lua 从字符串获取指定第几位数到第几位数 </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;– 判断utf8字符byte长度&lt;br /&gt;
– 0xxxxxxx - 1 byte&lt;br /&gt;
– 110yxxxx - 192, 2 byte&lt;br /&gt;
– 1110yyyy - 225, 3 byte&lt;br /&gt;
– 11110zzz - 240, 4 byte&lt;br /&gt;
local function chsize(char)&lt;br /&gt;
		if not char then&lt;br /&gt;
		    print(“not char”)&lt;br /&gt;
		    return 0&lt;br /&gt;
		    elseif char &amp;gt; 240 then&lt;br /&gt;
		    return 4&lt;br /&gt;
		    elseif char &amp;gt; 225 then&lt;br /&gt;
		    return 3&lt;br /&gt;
		    elseif char &amp;gt; 192 then&lt;br /&gt;
		    return 2&lt;br /&gt;
		    else&lt;br /&gt;
		    return 1&lt;br /&gt;
	    end&lt;br /&gt;
end&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- 计算utf8字符串字符数, 各种字符都按一个字符计算
-- 例如utf8len(&amp;#34;1你好&amp;#34;) =&amp;gt; 3
function utf8len(str)
    local len = 0
    local currentIndex = 1
    while currentIndex &amp;lt;= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    len = len +1
    end
    return len
end

-- 截取utf8 字符串
-- str: 要截取的字符串
-- startChar:   开始字符下标,从1开始
-- numChars:要截取的字符长度
function utf8sub(str, startChar, numChars)
    local startIndex = 1
    while startChar &amp;gt; 1 do
	    local char = string.byte(str, startIndex)
	    startIndex = startIndex + chsize(char)
	    startChar = startChar - 1
    end

    local currentIndex = startIndex
    
    while numChars &amp;gt; 0 and currentIndex &amp;lt;= #str do
	    local char = string.byte(str, currentIndex)
	    currentIndex = currentIndex + chsize(char)
	    numChars = numChars -1
    end
    return str:sub(startIndex, currentIndex - 1)
end

-- 自测
function test()
    -- test utf8len
    assert(utf8len(&amp;#34;你好1世界哈哈&amp;#34;) == 7)
    assert(utf8len(&amp;#34;你好世界1哈哈 &amp;#34;) == 8)
    assert(utf8len(&amp;#34; 你好世 界1哈哈&amp;#34;) == 9)
    assert(utf8len(&amp;#34;12345678&amp;#34;) == 8)
    assert(utf8len(&amp;#34;øpø你好pix&amp;#34;) == 8)

    -- test utf8sub
    assert(utf8sub(&amp;#34;你好1世界哈哈&amp;#34;,2,5) == &amp;#34;好1世界哈&amp;#34;)
    assert(utf8sub(&amp;#34;1你好1世界哈哈&amp;#34;,2,5) == &amp;#34;你好1世界&amp;#34;)
    assert(utf8sub(&amp;#34; 你好1世界 哈哈&amp;#34;,2,6) == &amp;#34;你好1世界 &amp;#34;)
    assert(utf8sub(&amp;#34;你好世界1哈哈&amp;#34;,1,5) == &amp;#34;你好世界1&amp;#34;)
    assert(utf8sub(&amp;#34;12345678&amp;#34;,3,5) == &amp;#34;34567&amp;#34;)
    assert(utf8sub(&amp;#34;øpø你好pix&amp;#34;,2,5) == &amp;#34;pø你好p&amp;#34;)
    
    print(&amp;#34;all test succ&amp;#34;)
end

test()
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;script async=&quot;&quot; defer=&quot;&quot; src=&quot;https://buttons.github.io/buttons.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Please &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi/hexo-theme-tsangsi&quot; data-icon=&quot;octicon-star&quot; aria-label=&quot;Star tsangsi/hexo-theme-tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Star&lt;/a&gt; this Project if you like it! &lt;a class=&quot;github-button&quot; href=&quot;https://github.com/tsangsi&quot; aria-label=&quot;Follow @tsangsi on GitHub&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Follow&lt;/a&gt; would also be appreciated!&lt;br /&gt;
Peace!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &amp;lt;hr/&amp;gt;
            
            

            &amp;lt;br/&amp;gt;

            
            
            

            &amp;lt;br/&amp;gt;
            
            
                
                
                &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css&quot;/&amp;gt;
                &amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
            
            
            &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-763_-Lua-lua-%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0%E5%88%B0%E7%AC%AC%E5%87%A0%E4%BD%8D%E6%95%B0/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-75_%E9%80%86%E5%90%91%E6%B5%81%E6%B0%B4%E8%B4%A6(3)-%E6%94%BE%E7%BD%AE%E6%B1%9F%E6%B9%96Lua%E6%8F%90%E5%8F%96/" />
  <id>http://0.0.0.0:8081/2016-01-01-75_逆向流水账(3): 放置江湖Lua提取</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;巧了，又有“江湖”。&lt;/p&gt;

&lt;p&gt;这个江湖比爆炒江湖要复杂一点，不光是手动能做的事情更多&lt;del&gt;不是纯放置&lt;/del&gt;，而且逆向流程也更长，还颇走了点弯路……&lt;/p&gt;

&lt;h2 id=&quot;不弯的路&quot;&gt;不弯的路&lt;/h2&gt;

&lt;h3 id=&quot;frida-native-hook&quot;&gt;Frida Native Hook&lt;/h3&gt;

&lt;p&gt;关键函数长这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nm -DC libcocos2dlua.so | grep -i lual_load
# Signature是手动加的
0072f41c T luaL_loadbufferx(Lua_State *, char *lua_loadable, uint size, char *chunkname)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要用到后面三个参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;lua_loadable: LuaJIT能认的Lua脚本或Bytecode，本文中是后者&lt;/li&gt;
  &lt;li&gt;size: lua_loadable的长度&lt;/li&gt;
  &lt;li&gt;chunkname: 可能是文件名也可能是其他，另存文件时候用得上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frida Hook：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var func = Module.findBaseAddress(&amp;#34;libcocos2dlua.so&amp;#34;).add(0x72f41c);
Interceptor.attach(func, {
  onEnter: function (args) {
    # 这里理论上应该用replace(all)而不是split和join..
    this.fileout = &amp;#34;/sdcard/lua/&amp;#34; + Memory.readCString(args[3]).split(&amp;#34;/&amp;#34;).join(&amp;#34;.&amp;#34;);
    console.log(&amp;#34;read file from: &amp;#34;+this.fileout);
    var tmp = Memory.readByteArray(args[1], args[2].toInt32());
    var file = new File(this.fileout, &amp;#34;w&amp;#34;);
    file.write(tmp);
    file.flush();
    file.close();
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ljd-decompile-bytecode-to-pseudo-but-valid-lua&quot;&gt;LJD Decompile Bytecode To Pseudo-but-valid Lua&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# clone这个fork
git clone https://github.com/Aussiemon/ljd
cd ljd

adb pull /sdcard/lua .
python3 main.py -r ../lua -d output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;output/&lt;/code&gt;里就是想要的东西了。&lt;/p&gt;

&lt;h2 id=&quot;弯路&quot;&gt;弯路&lt;/h2&gt;

&lt;p&gt;本来10分钟的工作量……&lt;/p&gt;

&lt;h3 id=&quot;用现成代码解密&quot;&gt;用现成代码解密&lt;/h3&gt;

&lt;p&gt;找到一个&lt;a href=&quot;https://github.com/crazyyao0/codearchive/tree/master/reverse/%E6%94%BE%E7%BD%AE%E6%B1%9F%E6%B9%96&quot;&gt;前辈帖子&lt;/a&gt;，帖子说Signature是六位，当前版本已经有8位了，果然跑不出结果。然后又找了几个其他版本的xxtea_decrypt，浪费了不少时间。&lt;/p&gt;

&lt;p&gt;帖子提到密钥长度是128bit（实际上他代码里用了个&lt;a href=&quot;https://github.com/crazyyao0/codearchive/blob/master/reverse/%E6%94%BE%E7%BD%AE%E6%B1%9F%E6%B9%96/decode_lua/xxtea.cpp#L63&quot;&gt;fix_key_length取前16位&lt;/a&gt;），这和IDA里看到的、后来Frida观察内存里的，相互都不一样。。&lt;/p&gt;

&lt;h3 id=&quot;写一份代码解密&quot;&gt;写一份代码解密&lt;/h3&gt;

&lt;p&gt;仗着IDA和写过几行C++，直接忽略了网上的&lt;a href=&quot;https://www.52pojie.cn/thread-682778-1-1.html&quot;&gt;Hook教程&lt;/a&gt;，直接准备从libcocos2dlua.so里翻译个decrypt.c来做这事——万一有些文件游戏不load咋办？而且，硬核玩家怎么会用Hook这么粗暴的手段呢？&lt;del&gt;还有到哪能找个Android 4.4真机来用Substrate？&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;写完没花多久，就是没写对，解不出东西来。不过写的过程中发现了xxtea_decrypt魔改过，.so里还遗留着许多对比文件签名根本不会跳进去的branch。&lt;/p&gt;

&lt;p&gt;调bug陆陆续续用了好几天，最后还有个Overflow没什么头绪就先放着了，如果有人对此有研究或者感兴趣可以邮件/开Issue联系…… &lt;/p&gt;

&lt;h3 id=&quot;frida使用&quot;&gt;Frida使用&lt;/h3&gt;

&lt;p&gt;Frida文档倒是挺长的，就是参考价值不大，只能当函数列表用，所有的类型都要自己猜。其中有个Hook方法叫做findExportByName(“xxx.so”, “symbol”)，用它没找到loadbuffer，也没有看到错误日志，可能是因为直接把nm demangle的symbol传进去了……&lt;/p&gt;

&lt;p&gt;另外本来应该&lt;a href=&quot;https://github.com/frida/frida-node/blob/master/examples/hook_function.js&quot;&gt;用Nodejs来跑&lt;/a&gt;，这样有语法高亮和自动indent，而不是在Python里拼字符串，写流水账的时候才反应过来。&lt;/p&gt;

&lt;h3 id=&quot;luajit&quot;&gt;LuaJIT&lt;/h3&gt;

&lt;p&gt;找到LuaJIT版本编译之后，一开始想法是按游戏加载顺序把这些加载到内存里去，然后导出成表或者写几个函数直接查。试着按游戏原本顺序依次loadfile，有些许报错，但是接下来的操作就不会了。&lt;/p&gt;

&lt;p&gt;跑去看了看文档，比Frida还简陋，又不想读它源代码，放弃。&lt;/p&gt;

&lt;h3 id=&quot;ljd年久失修&quot;&gt;LJD年久失修&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://bbs.pediy.com/thread-216800-1.htm&quot;&gt;这个帖子&lt;/a&gt;说&lt;a href=&quot;https://github.com/NightNord/ljd&quot;&gt;LJD&lt;/a&gt;要手动加Opcode，加完一跑报异常了，修修补补好一会儿，才想起肯定有前人干过这事，看了看&lt;a href=&quot;https://github.com/NightNord/ljd/network/members&quot;&gt;fork&lt;/a&gt;，找到上文里那个能用的版本。&lt;/p&gt;

&lt;h2 id=&quot;接下来&quot;&gt;接下来&lt;/h2&gt;

&lt;p&gt;前端太不熟练了，不然（感觉）可以很快搭个查询页面出来……现在指针/ID类型太多，编辑器里查着挺麻烦的。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-75_%E9%80%86%E5%90%91%E6%B5%81%E6%B0%B4%E8%B4%A6(3)-%E6%94%BE%E7%BD%AE%E6%B1%9F%E6%B9%96Lua%E6%8F%90%E5%8F%96/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-744_Video-Description-A-Survey-of-Methods,-Datasets-a/" />
  <id>http://0.0.0.0:8081/2016-01-01-744_Video Description: A Survey of Methods, Datasets a</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;h3 id=&quot;视频描述仍然处于起步阶段的原因&quot;&gt;&lt;a href=&quot;#视频描述仍然处于起步阶段的原因&quot; class=&quot;headerlink&quot; title=&quot;视频描述仍然处于起步阶段的原因&quot;&gt;&lt;/a&gt;视频描述仍然处于起步阶段的原因&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对视频描述模型的分析是困难的，很难去判别是visual feature 亦或是 language model 哪个做的贡献大&lt;/li&gt;
&lt;li&gt;当前的数据集，既没有包含足够的视觉多样性，也没有复杂的语言结构&lt;/li&gt;
&lt;li&gt;当前的凭据指标并不能非常正确的去评估生成的句子与人类生成的句子之间的一致程度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-difficulty-of-video-caption&quot;&gt;&lt;a href=&quot;#the-difficulty-of-video-caption&quot; class=&quot;headerlink&quot; title=&quot;the difficulty of video caption&quot;&gt;&lt;/a&gt;the difficulty of video caption&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;并不是在video中的所有object 都是与description相关的，可能其只是背景中的一个元素。    &lt;/li&gt;
&lt;li&gt;此外，还需要objects的运动信息，以及 事件，动作，对象之间的因果关系。   &lt;/li&gt;
&lt;li&gt;视频中的action可能有不同的长度，不同的action之间，可能有重叠。    &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Sequence-Learning-based-Video-Captioning-Methods&quot;&gt;&lt;a href=&quot;#Sequence-Learning-based-Video-Captioning-Methods&quot; class=&quot;headerlink&quot; title=&quot;Sequence Learning based Video Captioning Methods&quot;&gt;&lt;/a&gt;Sequence Learning based Video Captioning Methods&lt;/h3&gt;
&lt;h4 id=&quot;CNN-RNN-based&quot;&gt;&lt;a href=&quot;#CNN-RNN-based&quot; class=&quot;headerlink&quot; title=&quot;CNN-RNN-based&quot;&gt;&lt;/a&gt;CNN-RNN-based&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一个 end-to-end：&lt;/p&gt;
&lt;p&gt;S. Venugopalan, H. Xu, J. Donahue, M. Rohrbach, R. Mooney, and K. Saenko. 2014. Translating videos to natural language using deep recurrent neural networks. arXiv preprint arXiv:1412.4729, (2014).    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea016090c918345.png&quot; alt=&quot;图片1.png&quot; title=&quot;图片1.png&quot; /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S2VT （变长输入，变长输出）&lt;/p&gt;
&lt;p&gt;I. Sutskever, O. Vinyals, and Q. V. Le. 2014. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems. 3104-3112.    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea01536b3144846.png&quot; alt=&quot;图片2.png&quot; title=&quot;图片2.png&quot; /&gt;   
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TA ( 加入C3D[1] )&lt;/p&gt;
&lt;p&gt;L. Yao, A. Torabi, K. Cho, N. Ballas, C. Pal, H. Larochelle, and A.Courville. 2015. Describing videos by exploiting temporal structure. In IEEE ICCV    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea016a248c95582.png&quot; alt=&quot;图片3.png&quot; title=&quot;图片3.png&quot; /&gt;  
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LSTM-E （making a common visual-semantic-embedding ）&lt;/p&gt;
&lt;p&gt;Y. Pan, T. Mei, T. Yao, H. Li, and Y. Rui. 2016. Jointly modeling embedding and translation to bridge video and language. In IEEE CVPR. &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea421aaf9013065.png&quot; alt=&quot;图片4.png&quot; title=&quot;图片4.png&quot; /&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GRU-EVE  ( short fourier transform)&lt;/p&gt;
&lt;p&gt;N. Aafaq, N. Akhtar, W. Liu, S. Z. Gilani and A. Mian. 2019. Spatio-Temporal Dynamics and Semantic Attribute Enriched Visual Encoding for Video Captioning. In IEEE CVPR.    &lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea0163113561600.png&quot; alt=&quot;搜狗截图20190729152752.png&quot; title=&quot;搜狗截图20190729152752.png&quot; /&gt;   
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;h-RNN&lt;br /&gt;H. Yu, J. Wang, Z. Huang, Y. Yang, and W. Xu. 2016. Video paragraph captioning using hierarchical recurrent neural networks. In IEEE CVPR.&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ea63af2e0354548.png&quot; alt=&quot;图片5.png&quot; title=&quot;图片5.png&quot; /&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;RL-based&quot;&gt;&lt;a href=&quot;#RL-based&quot; class=&quot;headerlink&quot; title=&quot;RL-based&quot;&gt;&lt;/a&gt;RL-based&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Z. Ren, X. Wang, N. Zhang, X. Lv, and L. Li. 2017. Deep reinforcement learning-based image captioning with embedding reward. arXiv preprint arXiv:1704.03899, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Y. Chen, S. Wang, W. Zhang, and Q. Huang. 2018.  ==Less Is More: Picking Informative Frames for Video Captioning.==  arXiv preprint arXiv:1803.01457, (2018).&lt;/p&gt;
&lt;p&gt;提出了一个基于强化学习的方法，来选择 key informative frames 来表达一个 complete video ，希望这样的操作可以忽略掉噪声和不必要的计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;L. Li and B. Gong. 2018. End-to-End Video Captioning with Multitask Reinforcement Learning. arXiv preprint arXiv:1803.07950,&lt;br /&gt;(2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R. Pasunuru and M. Bansal. 2017. Reinforced video captioning with entailment rewards. arXiv preprint arXiv:1708.02300, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S. Phan, G. E. Henter, Y. Miyao, and S. Satoh. 2017. Consensusbased Sequence Training for Video Captioning. arXiv preprint arXiv:1712.09532, (2017).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;X. Wang, W. Chen, J. Wu, Y. Wang, and W. Y. Wang. 2017.  ==Video Captioning via Hierarchical Reinforcement Learning.==  arXiv preprint arXiv:1711.11135, (2017).&lt;/p&gt;
&lt;p&gt;在 decoder阶段，使用 深度强化学习，这个方法证明可以捕捉到视频内容中的细节，并生成细粒度的description，但是！这个方法相对于当前的baseline 没有多大的提高。（我自己还需要再看看， 使用DRL的motivation）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Evaluation-Metrics&quot;&gt;&lt;a href=&quot;#Evaluation-Metrics&quot; class=&quot;headerlink&quot; title=&quot;Evaluation Metrics&quot;&gt;&lt;/a&gt;Evaluation Metrics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/joshuaxx316/article/details/58696552&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BLEU、ROUGE、METEOR  来源于 机器翻译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CIDEr、SPICE 来源于图像描述   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BLEU&quot;&gt;&lt;a href=&quot;#BLEU&quot; class=&quot;headerlink&quot; title=&quot;BLEU&quot;&gt;&lt;/a&gt;BLEU&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/allocator/article/details/79657792&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;BLEU参考链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;==BLEU实质是对两个句子的共现词频率计算==，但计算过程中使用好些技巧，追求计算的数值可以衡量这两句话的一致程度。 &lt;/li&gt;
&lt;li&gt;BLEU容易陷入常用词和短译句的陷阱中，而给出较高的评分值。本文主要是对解决BLEU的这两个弊端的优化方法介绍。&lt;/li&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;　不考虑语言表达（语法）上的准确性； &lt;/li&gt;
&lt;li&gt;　 测评精度会受常用词的干扰； &lt;/li&gt;
&lt;li&gt;　 短译句的测评精度有时会较高； &lt;/li&gt;
&lt;li&gt;　没有考虑同义词或相似表达的情况，可能会导致合理翻译被否定；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;ROUGE&quot;&gt;&lt;a href=&quot;#ROUGE&quot; class=&quot;headerlink&quot; title=&quot;ROUGE&quot;&gt;&lt;/a&gt;ROUGE&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ed71f2086769963.png&quot; alt=&quot;20170228224903951.png&quot; title=&quot;20170228224903951.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;METEOR&quot;&gt;&lt;a href=&quot;#METEOR&quot; class=&quot;headerlink&quot; title=&quot;METEOR&quot;&gt;&lt;/a&gt;METEOR&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edcce1761442736.png&quot; alt=&quot;20170228225011405.png&quot; title=&quot;20170228225011405.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;CIDEr&quot;&gt;&lt;a href=&quot;#CIDEr&quot; class=&quot;headerlink&quot; title=&quot;CIDEr&quot;&gt;&lt;/a&gt;CIDEr&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edcce646d089162.png&quot; alt=&quot;20170228225056046.png&quot; title=&quot;20170228225056046.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;SPICE&quot;&gt;&lt;a href=&quot;#SPICE&quot; class=&quot;headerlink&quot; title=&quot;SPICE&quot;&gt;&lt;/a&gt;SPICE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基于 gt 和 pred 的场景图解析，来对预测结果进行评价，&lt;/li&gt;
&lt;li&gt;不被广泛使用的原因是，当前sentence scene graph 的能力还比较若，很容易解析错误(eg:dog swimming through river”, the failure case could be the word “swimming” being parsed as “object” and the word “dog” parsed as “attribute” )&lt;/li&gt;
&lt;li&gt;对句子解析错误了，那么给出的评价指标也不会很好！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3edd503479c20027.png&quot; alt=&quot;搜狗截图20190729194921.png&quot; title=&quot;搜狗截图20190729194921.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;当前的瓶颈：&quot;&gt;&lt;a href=&quot;#当前的瓶颈：&quot; class=&quot;headerlink&quot; title=&quot;当前的瓶颈：&quot;&gt;&lt;/a&gt;当前的瓶颈：&lt;/h3&gt;
&lt;h4 id=&quot;缺乏有效的评价指标&quot;&gt;&lt;a href=&quot;#缺乏有效的评价指标&quot; class=&quot;headerlink&quot; title=&quot;缺乏有效的评价指标&quot;&gt;&lt;/a&gt;缺乏有效的评价指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们的调查显示，阻碍这一研究进展的一个主要瓶颈是缺乏有效和有目的设计的视频描述评价指标。目前，无论是从机器翻译还是从图像字幕中，都采用了现有的度量标准，无法衡量机器生成的视频字幕的质量及其与人类判断的一致性。改进这些指标的一种方法是增加引用语句的数量。我们认为，从数据本身学习的目的构建的度量标准是推进视频描述研究的关键。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;王鑫也曾说：human evaluation在video captioning任务中是有必要的       &lt;/p&gt;
&lt;h4 id=&quot;视觉特征部分的瓶颈&quot;&gt;&lt;a href=&quot;#视觉特征部分的瓶颈&quot; class=&quot;headerlink&quot; title=&quot;视觉特征部分的瓶颈&quot;&gt;&lt;/a&gt;视觉特征部分的瓶颈&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在一个video中，可能出现多个activity，但是caption model只能检测出部分几个，导致性能下降。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能这个video中 action 的持续时间较长，但是，当前的video representation方法只能捕捉时域较短的运动信息（eg:C3D），因此不能很好地提取视频特征。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大多数特征提取器只适用于静态或平稳变化的图像，因此难以处理突然的场景变化。目前的方法通过表示整体视频或帧来简化视觉编码部分。可能需要进一步探索注意力模型，以关注视频中具有重要意义的空间和时间部分。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前的encoder 与 decoder 部分，并 ==不是端到端的==，需要先提取 video representation再进行decoder，这样分布进行，而不是端到端的训练是不好的！    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;captioning-model-的可解释性不足&quot;&gt;&lt;a href=&quot;#captioning-model-的可解释性不足&quot; class=&quot;headerlink&quot; title=&quot;captioning model 的可解释性不足&quot;&gt;&lt;/a&gt;captioning model 的可解释性不足&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;举个例子：当我们从包含“白色消防栓”的帧中看到视频描述模型生成的标题“红色消防栓”时，很难确定颜色特征是视觉特征提取器编码错误还是由于使用的语言模型bias( 由于有过多的训练数据是“红色消防栓)。&lt;img src=&quot;https://i.loli.net/2019/07/29/5d3ee4996cf7480633.png&quot; alt=&quot;搜狗截图20190729202028.png&quot; title=&quot;搜狗截图20190729202028.png&quot; /&gt;



&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[1] D. Tran, L. D. Bourdev, R. Fergus, L. Torresani, and M. Paluri. 2014. C3D: Generic Features for Video Analysis. CoRR abs/1412.0767, (2014). &lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-744_Video-Description-A-Survey-of-Methods,-Datasets-a/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-726_-%E8%AF%91-Performance-evaluation-of-MQTT-and-CoAP-via-a-c/" />
  <id>http://0.0.0.0:8081/2016-01-01-726_[译]Performance evaluation of MQTT and CoAP via a c</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;　　Performance evaluation of MQTT and CoAP via a common middleware（全文翻译）&lt;/p&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Dinesh Thangavel&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Faculty of Engineering National University of Singapore&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Xiaoping Ma&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sense and Sense-Abilities, Institute for Infocomm Research&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Alvin Valera&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sense and Sense-Abilities, Institute for Infocomm Research&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hwee-Xian Tan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Sense and Sense-Abilities, Institute for Infocomm Research&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Colin Keng-Yan Tan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;School of Computing National University of Singapore&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;摘要：无线传感器网络（WSN）通常由在有限资源的设备上操作的传感器节点和网关组成。因此，WSN需要带宽高效和节能的应用协议进行数据传输。消息队列遥测传输（MQTT）和约束应用协议（CoAP）是为资源受限设备提出的两种此类协议。在本文中，我们设计和实现了一个支持MQTT和CoAP的常用中间件，并提供了一个通用的编程接口。我们设计可扩展的中间件来支持未来的协议。使用通用的中间件，我们进行了实验，研究MQTT和CoAP在端到端延迟和带宽消耗方面的性能。实验结果表明，MQTT消息具有比CoAP消息更低的丢包率，延迟低于CoAP消息，丢失率较高的延迟。此外，当消息大小小，损失率等于或小于25％时，CoAP生成比MQTT更低的附加流量，以确保消息的可靠性。&lt;/p&gt;
&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;
&lt;p&gt;无线传感器网络正在部署用于大规模的环境参数测量，如温度，湿度和空气质量在城市和恶劣环境中。典型的WSN部署包括传感器节点和网关。传感器节点测量物理环境并将数据发送到网关节点。网关聚合来自各种传感器节点的数据，然后将数据发送到服务器/代理。&lt;/p&gt;
&lt;p&gt;从端到端的角度来看，WSN可以被视为包括两个子网：（i）连接传感器节点和一个或多个网关节点的子网，其中传感器节点路由数据，直到使用WSN协议到达其中一个网关（例如，集合树协议），以及（ii）连接网关和后端服务器或代理的另一子网。由传感器节点生成的传感器数据通过网关传送到服务器。同时，有兴趣接收传感器数据的客户端连接到服务器以获取数据。图1显示了传感器数据如何从传感器节点流向网关，然后传送到服务器，最终传送到客户端的一个示例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-1.png&quot; alt=&quot;2-1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;为了将由网关节点收集的所有传感器数据传送到服务器，前者需要一种具有带宽高效、节能且能够处理有限硬件资源（即主存储器和电源）的协议。因此，已经提出了诸如消息队列遥测传输（MQTT）和受限应用协议(CoAP)的协议来专门解决现实世界WSN部署场景的难题。&lt;/p&gt;
&lt;p&gt;无线传感器网络将数据从网关传输到客户端的一种方式是“发布-订阅”架构。在这种架构中，需要数据（称为订阅者）的客户端向服务器（也称为代理）注册其兴趣。产生数据的客户端（称为发布者）将数据发送到服务器，该服务器将新鲜数据转发给订阅者。该架构的主要优点之一是需要数据的客户端和发送数据的客户端解耦，即传感器节点不需要知道对其数据感兴趣的客户端的身份，相反，客户端不需要知道生成传感器数据的传感器节点的身份。这种去耦使架构具有高度的可扩展性。“发布订阅”架构由机器到机器（M2M）协议（如MQTT和CoAP）支持。&lt;/p&gt;
&lt;p&gt;本文着重于将网关节点处的聚合传感器数据传输到后端服务器或代理。本文有两个新颖的贡献：（i）我们开发了一个常见的中间件，可以根据网关的“发布-订阅”体系结构适应不同的应用协议;和（ii）我们使用普通中间件在不同的网络条件下实验性地评估了CoAP和MQTT的性能。普通中间件的主要优点之一是它能够根据网络条件自适应地选择最合适的协议。&lt;/p&gt;
&lt;p&gt;本文的其余部分组织如下：第二部分概述了CoAP和MQTT，并介绍了常见的中间件设计。第三节介绍了用于评估常用中间件的实验设置，第四节提供了实验结果的讨论。第五节终于得出结论。&lt;/p&gt;
&lt;h4 id=&quot;应用层协议和通用的中间件&quot;&gt;&lt;a href=&quot;#应用层协议和通用的中间件&quot; class=&quot;headerlink&quot; title=&quot;应用层协议和通用的中间件&quot;&gt;&lt;/a&gt;应用层协议和通用的中间件&lt;/h4&gt;
&lt;p&gt;A. 消息队列遥测传输协议（MQTT）&lt;/p&gt;
&lt;p&gt;消息队列遥测传输（MQTT）协议是为资源有限的设备而设计的应用层协议。它使用基于主题的发布订阅体系结构。这意味着当客户端向特定主题T发布消息M时，所有订阅主题T的客户端将接收到消息M。就像超文本传输协议（HTTP），MQTT依赖于传输控制协议（TCP）和IP作为其底层。然而，与HTTP相比，MQTT被设计为具有较低的协议开销。&lt;/p&gt;
&lt;p&gt;MQTT中的消息的可靠性由三个服务质量（QoS）等级来考虑。QoS级别0意味着消息最多传送一次，不需要接收确认。QoS级别1意味着每个消息至少传送一次，并且需要确认消息接收。在QoS级别2中，四次握手机制用于一次传递消息。&lt;/p&gt;
&lt;p&gt;B. 受限应用协议（CoAP）&lt;/p&gt;
&lt;p&gt;约束应用协议（CoAP）是最近开发的应用层协议，旨在用于资源约束设备的通信。该协议基于表征状态传输（REST）架构，并支持像HTTP这样的请求响应模型。除请求响应模型外，CoAP还使用扩展GET方法支持发布订阅模式。与MQTT不同，CoAP的发布订阅模型使用通用资源标识符（URI）而不是主题。这意味着用户将订阅由URI U指定的特定资源。当发布者将数据D发布到URI U时，则所有订阅者都将被通知如D所示的新值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-2.png&quot; alt=&quot;2-2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;CoAP和MQTT的主要区别在于，前者运行在用户数据报协议（UDP）之上，而后者运行在TCP之上。由于UDP本质上不可靠，CoAP提供了自己的可靠性机制。这是通过使用“confirmable messages” 和“non-confirmable messages”来实现的。confirmable messages需要确认，而non-confirmable messages不需要确认。 CoAP和MQTT之间的另一个区别是不同QoS级别的可用性。MQTT定义了3个QoS级别，而CoAP不提供差异化的QoS。CoAP和MQTT的主要区别已经在图2中总结了。&lt;/p&gt;
&lt;p&gt;C. 通用的中间件&lt;/p&gt;
&lt;p&gt;CoAP和MQTT只是为了进行网关到服务器的通信而提出的两种协议，实际上为此提出了许多协议。为了使网关节点具有高度的灵活性，它必须支持各种协议，但同时它必须暴露出一个通用的API来简化网关应用的开发。因此，我们提出一个具有以下功能的常见中间件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可扩展的，支持现存的和未来的网关到服务器的数据传输协议。&lt;/li&gt;
&lt;li&gt;通用API，提供通用的编程接口来访问底层协议的不同功能;&lt;/li&gt;
&lt;li&gt;有适应能力的，在将来，中间件可以智能地决定使用给定某些约束的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;普通中间件的当前设计和实现如图3所示。开发了一个通用接口，使网关能够使用任何协议将从传感器节点聚合的数据转发到服务器。如上所述，中间件对扩展是开放的，使得新协议可以容易地并入到中间件中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-3.png&quot; alt=&quot;2-3&quot; /&gt;&lt;/p&gt;
&lt;p&gt;中间件的公共接口提供诸如publishMessage()和isPublishSuccess()之类的API调用，以发布消息，并检查发布的消息是否已被代理成功接收和接受。虽然MQTT和CoAP的各自的协议实现是不同的，但是发布订阅体系结构的特征被用来创建通用的API调用。例如，API调用publishMessage()接受诸如消息、目的地和主题之类的参数。在MQTT的情况下，通过连接到作为目的地的IP地址的代理将消息发布到主题。在CoAP的情况下，首先使用目标和主题生成URI，然后将消息发布到URI。&lt;/p&gt;
&lt;p&gt;这种常见的中间件实现已被用于比较MQTT和CoAP协议的性能。通用网关为协议的比较提供了一个统一的环境，简化了比较过程。比较方案采用的确切方法见第三部分。&lt;/p&gt;
&lt;h4 id=&quot;实验配置&quot;&gt;&lt;a href=&quot;#实验配置&quot; class=&quot;headerlink&quot; title=&quot;实验配置&quot;&gt;&lt;/a&gt;实验配置&lt;/h4&gt;
&lt;p&gt;第二部分C中介绍的中间件用于研究MQTT和CoAP协议的性能。实验的目的是确定各种参数对协议性能的影响。根据延迟和每个消息传输的总数据（字节）来衡量协议的性能。每个消息传输的总数据是协议带宽使用的指标。延迟被测量为接收文件（模拟聚合传感器数据）的时间与文件发布时间之间的差异。&lt;/p&gt;
&lt;h5 id=&quot;硬件配置&quot;&gt;&lt;a href=&quot;#硬件配置&quot; class=&quot;headerlink&quot; title=&quot;硬件配置&quot;&gt;&lt;/a&gt;硬件配置&lt;/h5&gt;
&lt;p&gt;实验评估中使用的硬件设置包括笔记本电脑，BeagleBoard-xM和上网本，分别作为服务器，发布者，订阅者，一个广域网（WAN）仿真器如图4所示。在通过以太网连接到二层交换机的BeagleBoardxM中部署并执行了常见的中间件实现。这个中间件发挥了发布者的作用，网关发布的消息被路由通过上网本。被称为Wanem 的广域网模拟器应用程序在上网本上运行，以模拟有损网络连接，如Bhattacharyya和Bandyopadhyay所做的以前的工作。&lt;/p&gt;
&lt;p&gt;MQTT服务器和CoAP服务器在具有4GB RAM的笔记本电脑中运行，并且该笔记本电脑也连接到第二层交换机，如图4所示。&lt;/p&gt;
&lt;p&gt;为了确保计算延迟的时间同步，订阅者程序也在BeagleBoard-xM中运行。因此，BeagleBoard-xM中的中间件发布的任何消息将通过上网本到达笔记本电脑中的服务器，然后通过上网本返回到BeagleBoard-xM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-4.png&quot; alt=&quot;2-4&quot; /&gt;&lt;/p&gt;
&lt;h5 id=&quot;软件配置&quot;&gt;&lt;a href=&quot;#软件配置&quot; class=&quot;headerlink&quot; title=&quot;软件配置&quot;&gt;&lt;/a&gt;软件配置&lt;/h5&gt;
&lt;p&gt;MQTT和CoAP协议的开源实现，即Mosquitto和libcoap，与中间件集成，用于进行实验。为了模拟来自传感器节点的数据接收，在BeagleBoard-xM中执行一个小程序来生成传感器数据，而传感器数据又由网关发布。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-6.png&quot; alt=&quot;2-6&quot; /&gt;&lt;/p&gt;
&lt;p&gt;为了准确计算延迟，由网关发布的每个由用户接收的消息都被记录下来。 Wireshark用于测量整个实验中通过网络传输的字节数。请注意，传输字节的总数包括协议开销以及重传。实验结果见第四节。&lt;/p&gt;
&lt;h4 id=&quot;实验结果&quot;&gt;&lt;a href=&quot;#实验结果&quot; class=&quot;headerlink&quot; title=&quot;实验结果&quot;&gt;&lt;/a&gt;实验结果&lt;/h4&gt;
&lt;p&gt;由于简单的实验设置只涉及一个发布者，一个服务器和一个代理，两个协议实现了100%的消息传递率，而不管所有进行的实验中的丢包率如何。这反映了MQTT和CoAP都具有良好的重传方案来处理下层的丢包。因此，我们将我们的比较集中在消息延迟和每个消息生成的数据总量上。&lt;/p&gt;
&lt;p&gt;A. 丢包对时延的影响&lt;/p&gt;
&lt;p&gt;我们首先考虑丢包对两个协议的延迟性能的影响。任何网络中的分组丢失导致消息的重传，从而导致消息接收中的更长的延迟。为了公平比较，选择MQTT网关QoS 1和用户QoS 1以与CoAP的可确认消息进行比较，因为这两个设置在消息的传输和确认方面是相似的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-5.png&quot; alt=&quot;2-5&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-7.png&quot; alt=&quot;2-7&quot; /&gt;&lt;/p&gt;
&lt;p&gt;表I列举了不同丢包率下两种协议的平均延迟，图6绘制延迟累积分布函数（CDF）。显然，对于较低的数据包丢失值，消息对MQTT的延迟较低。然而，随着分组丢失的增加，CoAP在延迟方面表现优于MQTT。这是因为与丢包率较高时CoAP中较小的UDP开销相比，消息重传中涉及的TCP开销更大。&lt;/p&gt;
&lt;p&gt;B. 丢包率对数据传输的影响&lt;/p&gt;
&lt;p&gt;每个消息传输的数据被定义为产生的流量总量除以成功传递的消息的总数。它是从Wireshark计算的消息大小为60个字节在不同的损失率值的情况下。网关和订阅者的服务质量也是一样的。图中的曲线图7总结了获得的结果。该图表显示，QoS 2消息与QoS 0和QoS 1相比占用较多的带宽，用于较低的丢包率。这是因为QoS 2中的四次握手机制。QoS 0具有最少的数据传输，因为不需要来自其他主机的确认。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-8.png&quot; alt=&quot;2-8&quot; /&gt;&lt;/p&gt;
&lt;p&gt;C. 各种消息大小的开销&lt;/p&gt;
&lt;p&gt;传输的总数据与总消息大小的比率是数据传输涉及的开销的指标。各种有效负载大小的这个比率如图8所示。较小消息的比率很大，因为确认的大小与消息的大小相当。当消息大小增加时，确认的大小对额外的开销造成的影响很小。额外的开销主要由消息大小和重传次数决定。&lt;/p&gt;
&lt;p&gt;当分组丢失率低时，对于所有消息大小，CoAP生成比MQTT少的开销。当丢包率较高时，当消息大小小时，CoAP仍然比MQTT拥有更少的开销。当消息大小增加时，反之亦然。这是因为当消息大小较大时，UDP丢失消息的概率高于TCP，导致CoAP比MQTT更频繁地重发整个消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohe7ixo05.bkt.clouddn.com/2017/7/2-9.png&quot; alt=&quot;2-9&quot; /&gt;&lt;/p&gt;
&lt;p&gt;D. 自适应改变协议&lt;/p&gt;
&lt;p&gt;第IV-A，IV-B和IV-C节显示，两种协议的性能在不同的网络条件下是不同的。在不同网络条件下使用正确的协议可能会在不同方面提高网络的性能，例如平均消息延迟或每个传递消息生成的数据总量。除了网络条件，应用程序还可以根据不同的应用程序具有不同的要求（如低延迟或低带宽利用率）来决定协议的选择。&lt;/p&gt;
&lt;p&gt;为了实现此功能，需要对网关和订阅者增加附加要求。网关必须能够检测网络条件，并且必须具有在不同网络条件下协议性能的先验知识。根据要优化的性能指标，网关将选择在传感器数据传输中使用的最佳协议。订阅者必须能够接收来自不同协议的消息。作为结果，订阅者最好有一个中间件来处理复杂性。我们开发的同样的中间件可以扩展到满足订阅者的要求。&lt;/p&gt;
&lt;h4 id=&quot;总结与未来的工作&quot;&gt;&lt;a href=&quot;#总结与未来的工作&quot; class=&quot;headerlink&quot; title=&quot;总结与未来的工作&quot;&gt;&lt;/a&gt;总结与未来的工作&lt;/h4&gt;
&lt;p&gt;在本文中，我们研究了聚合传感器数据从网关节点到后端服务器或代理的传输。我们提出了一个灵活的常见中间件，公开了一个通用的编程接口，可以扩展为适应网络条件。使用通用的中间件，我们研究了MQTT和CoAP的两个最常用的网关到后端数据传输协议的性能。实验结果表明，不同协议的性能取决于不同的网络条件。对于低丢包率的情况，MQTT消息的延迟低于CoAP，而对于高丢包率的情况， MQTT消息的延迟高于CoAP。此外，当消息较小，丢包率等于或小于25%时，由于可靠传输，CoAP比MQTT生成更少的额外流量。&lt;/p&gt;
&lt;p&gt;两个协议在性能上的差异可以被来提高网络性能，采用中间件根据当前的网络条件决定使用哪种协议。未来的研究领域包括检测网关上的网络状况，然后切换到为网络条件提供最大性能的协议。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-726_-%E8%AF%91-Performance-evaluation-of-MQTT-and-CoAP-via-a-c/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-6_-Lua_Trace-1.-Lua%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
  <id>http://0.0.0.0:8081/2016-01-01-6_[Lua_Trace] 1. Lua数据结构 </id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                    &amp;lt;p&amp;gt;摘要:[Lua_Trace] 1. Lua数据结构 - TString&amp;lt;/p&amp;gt;
                &amp;lt;br /&amp;gt;
                &amp;lt;p&amp;gt;
此源码分析的版本为 : &amp;lt;strong&amp;gt;Lua 5.3.1&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
	&lt;strong&gt;2. TString : 字符串结构&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//lobject.h

/*
 Header for string value; string bytes follow the end of this structure
 (aligned according to 'UTString'; see next).
*/
typedef struct TString {
  CommonHeader;
  lu_byte extra;  /* reserved words for short strings; &quot;has hash&quot; for longs */
  lu_byte shrlen;  /* length for short strings */
  unsigned int hash;
  union {
    size_t lnglen;  /* length for long strings */
    struct TString *hnext;  /* linked list for hash table */
  } u;
} TString;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	TString结构由上而下的元素共有：&lt;/p&gt;
&lt;p&gt;
	CommonHeader : GCObject的共有定义。&lt;/p&gt;
&lt;p&gt;
	extra : 短字符串(LUA_TSHRSTR)下，非0之数值表示GC不回收的保留字，如下luaX_tokens定义了Lua所有的保留字。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//llex.c

/* ORDER RESERVED */
static const char *const luaX_tokens [] = {
    &quot;and&quot;, &quot;break&quot;, &quot;do&quot;, &quot;else&quot;, &quot;elseif&quot;,
    &quot;end&quot;, &quot;false&quot;, &quot;for&quot;, &quot;function&quot;, &quot;goto&quot;, &quot;if&quot;,
    &quot;in&quot;, &quot;local&quot;, &quot;nil&quot;, &quot;not&quot;, &quot;or&quot;, &quot;repeat&quot;,
    &quot;return&quot;, &quot;then&quot;, &quot;true&quot;, &quot;until&quot;, &quot;while&quot;,
    &quot;//&quot;, &quot;..&quot;, &quot;...&quot;, &quot;==&quot;, &quot;&amp;gt;=&quot;, &quot;&amp;lt;=&quot;, &quot;~=&quot;,
    &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;::&quot;, &quot;&quot;,
    &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;
};

void luaX_init (lua_State *L) {
  int i;
  TString *e = luaS_newliteral(L, LUA_ENV);  /* create env name */
  luaC_fix(L, obj2gco(e));  /* never collect this name */
  for (i=0; iextra = cast_byte(i+1);  /* reserved word */
  }
};&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	extra : 长字符串(LUA_TLNGSTR)则表示是否有私有的hash table，有，设定为1。&lt;/p&gt;
&lt;p&gt;
	shrlen : 字符串长度 (LUA_TSHRSTR使用)。&lt;/p&gt;
&lt;p&gt;
	hash : 杂凑值，由杂凑算法产生。&lt;/p&gt;
&lt;p&gt;
	u : LUA_TLNGSTR下表示为字符串长度(lnglen)，LUA_TSHRSTR则表示为hash table的链接(*hnext)。&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;
	创建TString时，Lua会在TString(16 bytes)后开一空间存储字符串数据，这样的行为可由如下源码中察觉。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//lstring.c

*
 creates a new string object
*/
static TString *createstrobj (lua_State *L, const char *str, size_t l,
                              int tag, unsigned int h) {
  TString *ts;
  GCObject *o;
  size_t totalsize;  /* total size of TString object */
  totalsize = sizelstring(l);
  o = luaC_newobj(L, tag, totalsize);
  ts = gco2ts(o);
  ts-&amp;gt;hash = h;
  ts-&amp;gt;extra = 0;
  memcpy(getaddrstr(ts), str, l * sizeof(char));
  getaddrstr(ts)[l] = '';  /* ending 0 */
  return ts;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;img border=&quot;0&quot; src=&quot;https://az787680.vo.msecnd.net/user/iounegpf/1507/201571391157172.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
	换句话说，欲取得字符串的方法可透过如下方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
TString* p;
char* str=(char*)(p+1); //TString的字符串指针&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Lua有针对短字符串(LUA_TSHRSTR : 长度小于40)采取节省内存与性能优化的措施，当多个同为短字符串且内容皆相同的情境下，那它们皆使用同一份TString对象，实现方式是通过字符串来得到一个hash值，并透过全域hash表(g-&amp;gt;strt)查找是否存在相同的hash值(重复的字符串)，如果已经有了，那么就直接引用该对象(并进行引用数据++操作)，反之，Lua会创建一TString放在hash表中对应的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
//lstring.c

/*
 new string (with explicit length)
*/
TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {
  if (l &amp;lt;= LUAI_MAXSHORTLEN)  /* short string? */
    return internshrstr(L, str, l);
  else {
    TString *ts;
    if (l + 1 &amp;gt; (MAX_SIZE - sizeof(TString))/sizeof(char))
      luaM_toobig(L);
    ts = createstrobj(L, str, l, LUA_TLNGSTR, G(L)-&amp;gt;seed);
    ts-&amp;gt;u.lnglen = l;
    return ts;
  }
}

/*
 checks whether short string exists and reuses it or creates a new one
*/
static TString *internshrstr (lua_State *L, const char *str, size_t l) {
  TString *ts;
  global_State *g = G(L);
  unsigned int h = luaS_hash(str, l, g-&amp;gt;seed);
  TString list = &amp;amp;g-&amp;gt;strt.hash[lmod(h, g-&amp;gt;strt.size)];
  for (ts = *list; ts != NULL; ts = ts-&amp;gt;u.hnext) {
    if (l == ts-&amp;gt;shrlen &amp;amp;&amp;amp;
        (memcmp(str, getstr(ts), l * sizeof(char)) == 0)) {
      /* found! */
      if (isdead(g, ts))  /* dead (but not collected yet)? */
        changewhite(ts);  /* resurrect it */
      return ts;
    }
  }
  if (g-&amp;gt;strt.nuse &amp;gt;= g-&amp;gt;strt.size &amp;amp;&amp;amp; g-&amp;gt;strt.size &amp;lt;= MAX_INT/2) {
    luaS_resize(L, g-&amp;gt;strt.size * 2);
    list = &amp;amp;g-&amp;gt;strt.hash[lmod(h, g-&amp;gt;strt.size)];  /* recompute with new size */
  }
  ts = createstrobj(L, str, l, LUA_TSHRSTR, h);
  ts-&amp;gt;shrlen = cast_byte(l);
  ts-&amp;gt;u.hnext = *list;
  *list = ts;
  g-&amp;gt;strt.nuse++;
  return ts;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	有任何错误请指正，后续我将尽可能的再补充详细&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-6_-Lua_Trace-1.-Lua%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/2016-01-01-699_%E5%9C%A8Swift%E4%B8%AD%E6%9E%84%E5%BB%BAassert(),-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-Lazy-Evaluation/" />
  <id>http://0.0.0.0:8081/2016-01-01-699_在Swift中构建assert(), 第一部分: Lazy Evaluation</id>
  <published></published>
  <updated></updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;div id=&quot;toc&quot; class=&quot;toc-article&quot;&gt;
			&lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt;
		
			
		
		&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;p&amp;gt;本文翻译自&amp;lt;a href=&quot;https://developer.apple.com/swift/blog/?id=4&quot; target=&quot;_blank&quot; rel=&quot;external noopener noreferrer&quot;&amp;gt;Building assert() in Swift, Part 1: Lazy Evaluation&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;我们在设计Swift的时候觉得废除C预处理，排除bug并让我们的代码更加通俗易懂。这是开发者的大捷，也意味着Swift需要用新的方式实现旧的特性。大多数的特性（模块引入，条件编译）都了无新意，但或许最有趣的就是如何让Swift支持像&amp;lt;code&amp;gt;assert()&amp;lt;/code&amp;gt;这样的宏。  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当构建C语言的release版本时，&lt;code&gt;assert()&lt;/code&gt;宏指令并没有运行时特性，因为它不对任何参数做计算。C语言中最流行的实现方法如下：  &lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define assert(e)  ((void)0)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define assert(e)  &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) ((e) ? ((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) : __assert (&lt;span class=&quot;meta&quot;&gt;#e, __FILE__, __LINE__)))&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define __assert(e, file, line) &lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)printf (&lt;span class=&quot;string&quot;&gt;&amp;#34;%s:%u: failed assertion `%s&amp;#39;n&amp;#34;&lt;/span&gt;, file, line, e), abort())&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Swift模拟的断言(assert)提供C语言中断言几乎所有功能，不使用预处理，以更干净的方式实现。让我们深入学习Swift一些有趣的特性吧。  &lt;/p&gt;
&lt;h2 id=&quot;参数的惰性计算（Lazy-Evaluation）&quot;&gt;&lt;a href=&quot;#参数的惰性计算（Lazy-Evaluation）&quot; class=&quot;headerlink&quot; title=&quot;参数的惰性计算（Lazy Evaluation）&quot;&gt;&lt;/a&gt;参数的惰性计算（Lazy Evaluation）&lt;/h2&gt;
&lt;p&gt;当实现Swift的&lt;code&gt;assert()&lt;/code&gt;时，我们遇到的第一个挑战是没有明确的方式让一个函数接收一个表达式而不评判它。比如，我们想使用：  &lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;assert&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;x &lt;/span&gt;: Bool) {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-id&quot;&gt;#if&lt;/span&gt; !&lt;span class=&quot;selector-tag&quot;&gt;NDEBUG&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;selector-id&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;甚至当断言失效，应用程序将会在计算表达式时损失性能：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert(&lt;span class=&quot;name&quot;&gt;someExpensiveComputation&lt;/span&gt;() != &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;修复这种情况的一种方法是在定义断言的时候让它接收一个闭包(closure)：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func assert&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(predicate : () -&amp;gt; Bool)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	# !&lt;span class=&quot;title&quot;&gt;NDEBUG&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;		 !&lt;span class=&quot;title&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;title&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	#&lt;span class=&quot;title&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;正如我们想要的，只有在断言有效时才计算表达式，但它也给我们留下了一个不幸的调用语法：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;({ someExpensiveComputation()&lt;/span&gt;&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; })&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;我们可以用Swift的&lt;code&gt;@autoclosure&lt;/code&gt;属性来修复它。这个自动闭包属性可以用在函数的参数上来表明一个未经花括号修饰的表达式可以被隐式的打包成闭包并作为参数传递给函数。比如：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func assert&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;(predicate : @autoclosure () -&amp;gt; Bool)&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	# !&lt;span class=&quot;title&quot;&gt;NDEBUG&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;		 !&lt;span class=&quot;title&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;title&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	#&lt;span class=&quot;title&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这让你更自然的调用断言：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert(&lt;span class=&quot;name&quot;&gt;someExpensiveComputation&lt;/span&gt;() != &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;自动闭包是一个强大的特性，因为你可以有条件地计算表达式，多次计算并像使用闭包那样来使用打包的表达式。自动闭包也可以在Swift的其他地方使用。比如，实现简化逻辑运算符：&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;selector-tag&quot;&gt;&amp;amp;&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;lhs&lt;/span&gt;: BooleanType, &lt;span class=&quot;attribute&quot;&gt;rhs&lt;/span&gt;: &lt;span class=&quot;variable&quot;&gt;@autoclosure&lt;/span&gt; () -&amp;gt; BooleanType) &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt;&amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;Bool&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;	return lhs&lt;span class=&quot;selector-class&quot;&gt;.boolValue&lt;/span&gt; ? &lt;span class=&quot;selector-tag&quot;&gt;rhs&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.boolValue&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;通过将右边表达式以闭包形式接收，Swift提供合适的子表达式的惰性计算。  &lt;/p&gt;
&lt;h2 id=&quot;自动闭包&quot;&gt;&lt;a href=&quot;#自动闭包&quot; class=&quot;headerlink&quot; title=&quot;自动闭包&quot;&gt;&lt;/a&gt;自动闭包&lt;/h2&gt;
&lt;p&gt;作为C语言的宏，自动闭包要谨慎使用。因为从调用函数的一方看不出来参数的计算受到了影响。自动闭包有意地限制我们不传递参数，所以你不能在类似条件控制流的情形中使用它。在符合人们期望的实用语义情况（可能是“features”API）下使用它，而不是单单为了省略闭包的花括号。  &lt;/p&gt;
&lt;p&gt;本文涵盖了实现Swift断言的一个特别的部分，但接下来还会有更多带给大家。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/2016-01-01-699_%E5%9C%A8Swift%E4%B8%AD%E6%9E%84%E5%BB%BAassert(),-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-Lazy-Evaluation/&quot;&gt;&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on .&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[PLUM NIZ静电容键盘怎么样?]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98/niz%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E6%80%8E%E4%B9%88%E6%A0%B7/" />
  <id>http://0.0.0.0:8081/%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98/niz静电容键盘怎么样</id>
  <published>2020-09-25T08:50:18+08:00</published>
  <updated>2020-09-25T08:50:18+08:00</updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;task-list&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#第一诉求长时间敲击键盘不累&quot; id=&quot;markdown-toc-第一诉求长时间敲击键盘不累&quot;&gt;第一诉求：长时间敲击键盘不累。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第二诉求键帽手感要好&quot; id=&quot;markdown-toc-第二诉求键帽手感要好&quot;&gt;第二诉求：键帽手感要好。&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三诉求便携不占空间&quot; id=&quot;markdown-toc-第三诉求便携不占空间&quot;&gt;第三诉求：便携不占空间。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#写给大输入量文字工作者或是程序员&quot; id=&quot;markdown-toc-写给大输入量文字工作者或是程序员&quot;&gt;写给大输入量文字工作者或是程序员。&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#下面有几个使用场景&quot; id=&quot;markdown-toc-下面有几个使用场景&quot;&gt;下面有几个使用场景。&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者：糖果&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/313867469/answer/1492445584&quot;&gt;原文连接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;之前有很多把机械键盘，现在机械键盘基本都休息不用了， 主力用的键盘就两款：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.niz 白色PBT键帽 ATOM  68键。&lt;/li&gt;
  &lt;li&gt;2.niz 黑色POM键盘  Micro 82键。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实，敲击机械键盘，或是静电容键盘是有愉悦感的，说说为啥买niz。
几个诉求。&lt;/p&gt;
&lt;h2 id=&quot;第一诉求长时间敲击键盘不累&quot;&gt;第一诉求：长时间敲击键盘不累。&lt;/h2&gt;
&lt;p&gt;从使用机械键盘的使用经验来看，按键压力克数小， 按的时间长的，比如红轴机械键盘45g压力。 几乎是机械键盘里比较轻的轴体的了。
静电空键盘的按键压力克数是多少呢？ 是35g，对没错，红轴还轻，这也是当是买niz的一个理由，很轻，一天的敲击下来，手不会累的。niz键盘可以自己加重，加大到45g，在键帽下按装弹簧就行。&lt;/p&gt;

&lt;p&gt;niz手感到底是怎么感觉，是官方还是有的网友评论说，35g的niz键盘敲击如按少女酥胸般的绵软，感觉这波网友没几个正经的，但的确手感绵软，敲击键盘时马蹄声伴随。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw1024/de7b8e1fly1gisdx3g5elj21400u0gro.jpg&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833273&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;第二诉求键帽手感要好&quot;&gt;第二诉求：键帽手感要好。&lt;/h2&gt;
&lt;p&gt;机械键盘的键帽是可自由的更换的，静电容也可以。有过很多种，但是我想买一套POM键帽的键盘，POM键帽的键盘比较少，比较典型的一款就是cherry的g80-3494的红轴黑色框，因为我有g80-3000白色， 不想再买这么大的键盘，想买一个小的键盘。
niz的Micro 82键键盘就是POM键帽，布局是紧凑型， 比87键的键盘还要小。放在桌子上不占地方。
到手以后特别喜欢这个手感，POM键帽本身的特点有点滑滑的，但是和ABS键帽打油了那种滑不是一种手感，有人形容黑色款POM的手感，如摸黑色丝袜般的柔滑。个人感觉就是POM比PBT等键帽 的硬度要硬，感觉像敲击薄皮的核桃，其实的确有点像黑丝的感觉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wx1.sinaimg.cn/mw1024/de7b8e1fly1gisdx2fu4lj21400u043g.jpg&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002832599&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;第三诉求便携不占空间&quot;&gt;第三诉求：便携不占空间。&lt;/h2&gt;
&lt;p&gt;niz  ATOM68的是60%的键盘布局，已经很小了。比Micro 82还少了一排，周末的时候放到书包里直接带回家，重量也不太重。&lt;/p&gt;

&lt;h4 id=&quot;写给大输入量文字工作者或是程序员&quot;&gt;写给大输入量文字工作者或是程序员。&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.如果您是大输入的文字工作者，选35g重的款式，工作一天也不会太手累，再配一个掌托，用起来就更舒服，用了niz的静电容，再回去用机械键盘， 多少都会感觉机械键盘按着费力，那怕是45g的红轴，也能感觉10g的差别， 红轴手感更重。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.对于程序员推荐一种niz键盘的用法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重点：niz键盘是可以用来控制鼠标的，对，就是对鼠标的功能组合建来控制鼠标的移动和点击。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;下面有几个使用场景&quot;&gt;下面有几个使用场景。&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器：在浏览器中使用 vim插件，补充配合使用键盘移动鼠标，几乎可能解放鼠标。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VIM：tmux + vim插件 + vim 鼠标模式，基本可以解放鼠标。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;VSC:  git gui + terminal + tmux + gitsome这种组合，可以在vsc中完成各种git操数，用gh对github进行命令式的操作。这一些在niz键盘的配合下使用都很顺畅。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在基本不太用机械键盘了， 一天中就是两把niz键盘切换成用，白色PBT和黑色POM键帽的键盘，PBT和POM键帽之间的切换明显是有手指触感的跳跃感的，增加了敲击文字的乐趣。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002789148&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98/niz%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%98%E6%80%8E%E4%B9%88%E6%A0%B7/&quot;&gt;PLUM NIZ静电容键盘怎么样?&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on September 25, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[程序员如何选择合适的机械键盘]]></title>
 <link rel="alternate" type="text/html" href="http://0.0.0.0:8081/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/" />
  <id>http://0.0.0.0:8081/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/程序员如何选择合适的机械键盘</id>
  <published>2020-09-18T00:00:00+08:00</published>
  <updated>2020-09-18T00:00:00+08:00</updated>
  <author>
    <name>糖果</name>
    <uri>http://0.0.0.0:8081</uri>
    <email>49263457@email.com</email>
  </author>
  <content type="html">
    &lt;p id=&quot;toc&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul class=&quot;task-list&quot; id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1第一个要解决的问题手腕痛的问题&quot; id=&quot;markdown-toc-1第一个要解决的问题手腕痛的问题&quot;&gt;1.第一个要解决的问题：手腕痛的问题。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-c87&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-c87&quot;&gt;IKBC机械键盘闭眼入系列(友) c87&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2第二个要解决的问题手不累的问题&quot; id=&quot;markdown-toc-2第二个要解决的问题手不累的问题&quot;&gt;2.第二个要解决的问题：手不累的问题。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-w200&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-w200&quot;&gt;IKBC机械键盘闭眼入系列(友) w200&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3第三个要解决的问题键盘噪音的问题&quot; id=&quot;markdown-toc-3第三个要解决的问题键盘噪音的问题&quot;&gt;3.第三个要解决的问题：键盘噪音的问题。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-r300&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-r300&quot;&gt;IKBC机械键盘闭眼入系列(友) r300&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4第四个要解决的问题工业设计和素不素的问题&quot; id=&quot;markdown-toc-4第四个要解决的问题工业设计和素不素的问题&quot;&gt;4.第四个要解决的问题：工业设计和素不素的问题。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-f-rgb背光&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-f-rgb背光&quot;&gt;IKBC机械键盘闭眼入系列(友) F RGB背光&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5第五个要解决的问题关于价格和做工&quot; id=&quot;markdown-toc-5第五个要解决的问题关于价格和做工&quot;&gt;5.第五个要解决的问题：关于价格和做工。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-w200静音版&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-w200静音版&quot;&gt;IKBC机械键盘闭眼入系列(友) W200静音版&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6第六个要解决的问题购买与渠道的问题&quot; id=&quot;markdown-toc-6第六个要解决的问题购买与渠道的问题&quot;&gt;6.第六个要解决的问题：购买与渠道的问题。&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ikbc机械键盘闭眼入系列友-矮轴超薄款&quot; id=&quot;markdown-toc-ikbc机械键盘闭眼入系列友-矮轴超薄款&quot;&gt;IKBC机械键盘闭眼入系列(友) 矮轴超薄款&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833110&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;一，最好不要机械键盘，我没有听噪声的癖好，但如果有声音不是很大的，求推荐。&lt;/li&gt;
  &lt;li&gt;二，键程不用很大，有反馈的感觉就好，像笔记本键盘一样。&lt;/li&gt;
  &lt;li&gt;三，按键稳定，你不能手指放上面晃一晃按键就跟着你跑(夸张说法。。)&lt;/li&gt;
  &lt;li&gt;四，能素一点就素一点，这个是次要的，比如某些游戏键盘那样，灯光四射，我hold 不住。。。&lt;/li&gt;
  &lt;li&gt;五，这个不是需求。。纯感谢～感谢推荐～&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看了题主的需求后，觉得最优先应该考虑的问题是：“长时间敲击键盘，保持手不累与手腕不痛。”&lt;/p&gt;

&lt;p&gt;首先这个累不累的问题是与键盘的敲击量相关的。&lt;/p&gt;

&lt;p&gt;如果每天按键敲击量不大，无论什么键盘，只要质量不是太差，都可应付。&lt;/p&gt;

&lt;p&gt;如果键盘敲击点大的话，日常在一天的范围内，键盘的使用量也是有限的，可以通过软件跟踪，个人每天的击键数在26000-40000下这个范围左右，这是普通一天的敲击量，如果用普通键盘，基本一天下来会感觉到手累和手腕痛。&lt;/p&gt;

&lt;p&gt;在这个量化条件下(26000-40000敲击量左右)，需要选购一个键盘来，来缓解在一天范围内，因键盘敲击对手的伤害的问题。&lt;/p&gt;

&lt;h2 id=&quot;1第一个要解决的问题手腕痛的问题&quot;&gt;1.第一个要解决的问题：手腕痛的问题。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-c87&quot;&gt;IKBC机械键盘闭眼入系列(友) c87&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833212&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;有很多人说用人体工学的键盘可以解决这个问题。&lt;/p&gt;

&lt;p&gt;那什么是人体工学键盘，像微软那种流线型设计的是人体工程学键盘，像cherry那种机械键盘，只有键帽设计考虑到人体工学的，也算人体工学键盘。&lt;/p&gt;

&lt;p&gt;微软的人体工学键盘&lt;/p&gt;

&lt;p&gt;微软的人体工学键盘用过的体验是，的确可以解决手腕子痛的问题，那种垫高的仿皮手托的确很舒服，一天下来缓解了不少，输入量适中的话（注意不是大量），一天用下来手没问题，但后来还是放弃了使用这种键盘，原因有几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一.这种键盘一般采用的是ABS键帽，时间长了就会被打油，看着不舒服，用着也不舒服，不定期护理就比较粘手，键帽上的字很容易被磨掉。&lt;/li&gt;
  &lt;li&gt;二.这种键盘大多也是薄膜键盘，有人说带些机械键盘的手感， 用过，没感觉有什么机械键盘的手感，没有机械键盘那种明显的反馈力。&lt;/li&gt;
  &lt;li&gt;三.键盘适合手比较大的人用，欧美用户的手明显比亚洲人的手大一些，亚洲大手的人使用可能更合适，这可能是一个个别问题，但也是个问题。&lt;/li&gt;
  &lt;li&gt;四.如果你有不只一台电脑，也就不是一台键盘，除非你全用人体工学的，不然，在非人体工学键盘和人体键盘之间切换也是个问题，如果有人觉的切换自如，那也无所谓了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结论：无论是什么键盘，配有一个手托，对腕子痛对有很大的缓解作用。如果输入量适中，人体工学键盘是不错的选择。人体工学，不代表你可以敲击省力。&lt;/p&gt;

&lt;h2 id=&quot;2第二个要解决的问题手不累的问题&quot;&gt;2.第二个要解决的问题：手不累的问题。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-w200&quot;&gt;IKBC机械键盘闭眼入系列(友) w200&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833214&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;普通的机械键盘&lt;/p&gt;

&lt;p&gt;我们先来分析一下，让手不累的问题，如果想让手不累。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一.尽量不敲。（不敲不行啊，不出字啊。）&lt;/li&gt;
  &lt;li&gt;二.尽量少敲，还能多出字。（那和键盘没关系，使用快捷键或高效的输入法，比如五笔字型，但是有训练时间成本）&lt;/li&gt;
  &lt;li&gt;三.敲，但不需太用力的敲。（小时候玩过那种助力车吧，加了助力装置的小车，向前一推，比没有加这个装置的小车，同样的用力，可以跑相对更远的距离，跑同样的距离（输入量），就可以少用力。）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过分析，第三种是我们需要，敲键盘不用太使劲，还能把字都输入了，最省力的，同样的输入量，还能减少疲劳。&lt;/p&gt;

&lt;p&gt;机械键盘里，那种比较适应这种情况？
常见的机械键盘除了外型的不同，主要的区别在于按键下的轴体设计的不同，比较常见的轴体，有黑轴，青轴，茶轴，红轴。&lt;/p&gt;

&lt;p&gt;红轴：压力是相对较轻的，并且按下去时没有被阻段的感觉(段落感)， 按下去后的反馈力良好(键按下去，轴机械装置的设计的一种自动反弹力。) 键程无论高低（键帽高矮），都是点到即生效，不用触底。&lt;/p&gt;

&lt;p&gt;黑轴：是红轴的加重版，需要更大的力量，长期积累，手会累。&lt;/p&gt;

&lt;p&gt;青轴:是段落感最明显的轴体，产量也最大，是最有机械手感的轴体，问题还是长时间，使用手会累，声音过大。这不符合我们初忠，我们初忠不是光敲着爽，而是一天积累下来手不会累，这个不行。&lt;/p&gt;

&lt;p&gt;茶轴：是青轴的轻量级，有一点段落感，资料上说，设计出段落感是早期为了模拟传统打字机的特点，缓解过打字人员都新键盘的一些不适应。茶的设计，各方面是比较中庸的，那种使用场景差不多能适用，所有也被称为万能轴。&lt;/p&gt;

&lt;p&gt;现在自己日常使用的比较多的红轴，茶轴的。&lt;/p&gt;

&lt;p&gt;结论：长期使用敲击，红轴是最省力的，比红再重一点的就是茶轴。红的敲击速度快，因人而不同，误码率也相对高一些（敲快了容易出错，想不出错慢点敲）。茶轴因为有段落感回馈确认的原因，误输率也相对低一些（代价是手还是会累一些）。&lt;/p&gt;

&lt;h2 id=&quot;3第三个要解决的问题键盘噪音的问题&quot;&gt;3.第三个要解决的问题：键盘噪音的问题。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-r300&quot;&gt;IKBC机械键盘闭眼入系列(友) r300&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833215&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;薄膜键盘的声音一定就比机械键盘小吗？&lt;/p&gt;

&lt;p&gt;其实不一定的，那种用过的微软的人体工学键盘，敲击起来的声音真的也不比红轴车厘子的声音小到那去，另外相比红轴的车厘子键盘，声音更闷一些（觉得比经较难听）。&lt;/p&gt;

&lt;p&gt;是什么原因，造成机械键盘的声音大？&lt;/p&gt;

&lt;p&gt;声音一部产生于按键轴体本身，一部分产生于机械键盘里的钢板。&lt;/p&gt;

&lt;p&gt;像青轴这种轴体，单个轴按下去，本身就会产生类似于按圆珠笔帽一样的咔哒声音，外加按键触底到钢板的撞击声，噪音就更大！104根圆珠笔帽，和撞击钢板的声音。用过的青轴，实在是受不了这种声音，而且因为青轴的结构复杂，一般还容易出现问题，还有就是带背光的键盘问题率也相对高一些。&lt;/p&gt;

&lt;p&gt;而相反，如果使用没有段落感的轴体，另外也不使用有钢板的设计，在降噪方面就很好，像红轴这种键盘的设计，按键不用触底都可以输入的键盘，不需用大量都可以完成输入动作，声音就更小了。&lt;/p&gt;

&lt;p&gt;结论：要想声音做到最小，就用红轴，并且是无钢板设计的机械键盘，声音比有些薄膜还要小。&lt;/p&gt;

&lt;h2 id=&quot;4第四个要解决的问题工业设计和素不素的问题&quot;&gt;4.第四个要解决的问题：工业设计和素不素的问题。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-f-rgb背光&quot;&gt;IKBC机械键盘闭眼入系列(友) F RGB背光&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833217&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;设计素不素这种问题其实也不难，不要买带背光的键盘。另外300元以下的机械键盘是没什么设计的，那种87,104什么的键盘，本身都是南方那些厂子生产的，模具几乎都一样，那还来的设计，有的都是一个代工厂生产的，就是贴了不同的牌子，区别除了做工和用料，主要是轴体区别，轴本有内地产的，有台湾产的，还有德国产的。不是说国产的就不好，其实，他就是没有台产和德产的好，所以，如果预算够的话，要德产车厘子的轴，一分钱一分货。&lt;/p&gt;

&lt;p&gt;300以下基本没有设计的，模具都一样。那怕是车厘子初门款的键盘，其实都是有设计的。基本的红轴在500元上下，键盘与手托一体的工业设计，可以解决一天输入不累，手碗不痛的问题。&lt;/p&gt;

&lt;p&gt;键盘帽的最省心的方案，就是买一套原产的，没有什么别的原因，这东西没什么性价比，品质差距明显，一分钱一分货。&lt;/p&gt;

&lt;p&gt;结论：要素买经典款，经典款本身就素，有时是太素了。&lt;/p&gt;

&lt;h2 id=&quot;5第五个要解决的问题关于价格和做工&quot;&gt;5.第五个要解决的问题：关于价格和做工。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-w200静音版&quot;&gt;IKBC机械键盘闭眼入系列(友) W200静音版&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002832538&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;机械键盘的主要部件，基本就是车厘子的轴了，大家都一样， 说到做工，其实日产的键盘的做工比原产车厘子要好，包括台产和国内的有些厂商都比原产做工好（价格会高一些），同是用的原产的轴体。就像耳机一样，到后来差别，一般人很难分辨了，500元用的也是车厘子红轴，1200用的也是车厘子红轴，多花的钱都在其它部件工艺上，反正你买单，不差价就买。100元键盘和500键盘，差别明显,500元和800，1000的区别，已经不在轴体本身了。&lt;/p&gt;

&lt;p&gt;有人说HHKB一步到位，对于这个想说的是，如果你有钱，完全可以买超跑，买回来做运营的活， 如果你是码字大户，对自己好一些没问题。 但也见过，买HHBK回来，对键盘布局很不适应的。实用的话，就买个87,或是108标准键盘，带一体手托工业设计，是一些小布局键盘的超集，数字键盘可盲打，不累，手腕不痛，省心。&lt;/p&gt;

&lt;h2 id=&quot;6第六个要解决的问题购买与渠道的问题&quot;&gt;6.第六个要解决的问题：购买与渠道的问题。&lt;/h2&gt;

&lt;h3 id=&quot;ikbc机械键盘闭眼入系列友-矮轴超薄款&quot;&gt;IKBC机械键盘闭眼入系列(友) 矮轴超薄款&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot;&gt;var jd_union_pid=&quot;3002833220&quot;;var jd_union_euid=&quot;&quot;;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//ads-union.jd.com/static/js/union.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;从国内的渠道来看，最现实的购买人体工学方案的键盘就是微软的，别的几乎没有，如果你去美亚上看，有很多其它高端人体工学的牌子，还有那种，同时是机械键盘，又是人体工学键盘，但是国内没有卖的，可以走转运，如是你不是高烧用户， 费力不讨好，本身那些在国内就是小众品，微软的人体工学键盘国内可以买到，和转运回来的价格比相对便宜，但设计上都是多少年前的设计，还有售后的问题。&lt;/p&gt;

&lt;p&gt;Cherry历史上好像只出过一款人体工学的键盘，很多年前的事，还是和微软合作的貌似。&lt;/p&gt;

&lt;p&gt;HHBK之前京东上还没有卖的时候，可以走淘宝，代购售后没保证，有人经历过。&lt;/p&gt;

&lt;p&gt;上文没有提到其它具体的品牌，提到了微软的键盘，是因为在国内，微软的人体工学键盘，几乎就是人体工学键盘的代名词。cherry是机械的代名词，几乎所有有的品质的机械键盘，什么牌子的都算上，用的大多数都是她的轴体。&lt;/p&gt;

&lt;p&gt;想想为什么微软后来就没有新品的人体工学键盘上市了，为什么车厘子这么多年，也没出过多少款的人体工学键盘。键盘本身的核心在于轴体和整体的工业设计。&lt;/p&gt;

&lt;p&gt;所以，如果想买个打字不累，手腕不痛的键盘，不一定非要买人体工学的键盘，买一个原产红轴，不带钢板设计，配一个手托，无论什么牌子的机械键盘都可以满足基本需求，不要买太便宜的小厂货，也不要对大厂的入门款有太多期待。&lt;/p&gt;

&lt;p&gt;个人浅见，仅供参考！&lt;/p&gt;

&lt;p&gt;像3000系列都属于经典款，如果真的喜欢，价格合适就可以入了，这键盘不能说时尚好看，但常年存在，不是经典也不能一直流通。&lt;/p&gt;

&lt;p&gt;Cherry樱桃 G80-3000 3494机械键盘
淘宝
¥ 669.00
去购买
​
3800系列和3850是有区别的，我自己两种都有，也拆开过，3850更结实点。38XX系列适合亚洲人，不像3000系列是德产和捷克产的。有人不喜欢矮键帽，其实用多了OEM你就知道了，矮键帽更省力，常时间打字不累。&lt;/p&gt;

&lt;p&gt;Cherry樱桃G80-3800/3802MX2.0C 电竞有线游戏机械键盘
淘宝
¥ 339.00
去购买
​
以前varmilo据说是给国外代工的，质量都不错，特别他家的键帽和别人的不一样，我现在手上用的也是他们的PBT键帽，不太容易打油。&lt;/p&gt;

&lt;p&gt;varmilo阿米洛锦鲤键盘cherry樱桃红轴女生游戏办公
淘宝
¥ 1259.70
去购买
​
我现在主力的键盘 ，用的是IKBC的青轴，配的阿米洛的键帽，为什么这么选，一个是阿米洛的键帽要矮一些和其他品牌的比，但是要比3800的高，另外ikbc的键盘用的也是cherry轴，品控好，没有坏轴用着就可以了。&lt;/p&gt;

&lt;p&gt;ikbc银轴机械键盘 游戏吃鸡 cherry樱桃轴 F87/F108
淘宝
¥ 740.60
去购买
​
其实如果真要是打字的话，还有比红轴机械键盘更轻的键盘就是静电容键盘，价格比较中档一些的就是宁芝。&lt;/p&gt;

&lt;p&gt;宁芝（NIZ）普拉姆PLUM 键盘静电容键盘 有线键盘 码农
京东
¥ 655.00
去购买
​
红轴的安压力是开始35g,触底60g，而静电容就是35g，和45g这两种。&lt;/p&gt;

&lt;p&gt;宁芝有更多中键位配列，最常见的是micro 84。&lt;/p&gt;

&lt;p&gt;宁芝（NIZ）普拉姆PLUM静电容键盘 micro82/micro84 静
京东
¥ 884.00
去购买
​
还有66 68 82 87等。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://0.0.0.0:8081/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/&quot;&gt;程序员如何选择合适的机械键盘&lt;/a&gt; was originally published by 糖果 at &lt;a href=&quot;http://0.0.0.0:8081&quot;&gt;LUA教程&lt;/a&gt; on September 18, 2020.&lt;/p&gt;
  </content>
</entry>

</feed>
